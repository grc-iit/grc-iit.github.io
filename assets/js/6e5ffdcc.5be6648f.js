"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[46113],{72859:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"wisio/getting-started","title":"Getting Started","description":"Installation","source":"@site/docs/30-wisio/02-getting-started.md","sourceDirName":"30-wisio","slug":"/wisio/getting-started","permalink":"/docs/wisio/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/docs/wisio/overview"},"next":{"title":"Configuration","permalink":"/docs/wisio/configuration"}}');var a=s(74848),i=s(28453);const o={},r="Getting Started",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["To install WisIO through ",(0,a.jsx)(n.code,{children:"pip"})," (recommended for most users):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Ensure runtime dependencies for optional features (e.g., Darshan, Recorder) are installed.\n# This might involve using your system's package manager or a tool like Spack.\n# Example using Spack to prepare the environment:\n# spack -e tools install\npip install wisio[darshan,dftracer]\n"})}),"\n",(0,a.jsx)(n.p,{children:"To install WisIO from source (for developers or custom builds):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# 1. Install system dependencies:\n#    Refer to the "Install system dependencies" step in .github/workflows/ci.yml\n#    (e.g., build-essential, cmake, libarrow-dev, libhdf5-dev, etc.).\n#    Alternatively, tools like Spack can help manage these:\n#    # spack -e tools install\n\n# 2. Install Python build dependencies:\npython -m pip install --upgrade pip meson-python setuptools wheel\n\n# 3. Install WisIO from the root of this repository:\n#    The following command includes optional C++ components (tests and tools).\n#    The --prefix argument is optional and specifies the installation location.\npip install .[darshan,dftracer] \\\n  -Csetup-args="--prefix=$HOME/.local" \\\n  -Csetup-args="-Denable_tests=true" \\\n  -Csetup-args="-Denable_tools=true"\n\n# (Optional) Install dependencies for running tests if you plan to contribute or run local tests:\n# pip install -r tests/requirements.txt\n'})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(n.p,{children:["Here's an example of how to run WisIO with the ",(0,a.jsx)(n.code,{children:"recorder"})," analyzer using sample data included in the repository:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Before running, ensure the sample data is extracted.\n# For example, to extract the 'recorder-parquet' sample used below:\n# mkdir -p tests/data/extracted\n# tar -xzf tests/data/recorder-parquet.tar.gz -C tests/data/extracted\nwisio +analyzer=recorder percentile=0.99 trace_path=tests/data/extracted/recorder-parquet\n"})}),"\n",(0,a.jsx)(n.p,{children:'This command will analyze the traces and print a summary of I/O characteristics and detected bottlenecks. Below is a sample of the "I/O Characteristics" output:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CM1 I/O Characteristics \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                   \u2502\n\u2502  Runtime          667.81 seconds                                                                  \u2502\n\u2502  I/O Time         4.12 seconds                                                                    \u2502\n\u2502                   \u251c\u2500\u2500 Read - 0.00 seconds (0.05%)                                                 \u2502\n\u2502                   \u251c\u2500\u2500 Write - 0.58 seconds (14.08%)                                               \u2502\n\u2502                   \u2514\u2500\u2500 Metadata - 3.53 seconds (85.89%)                                            \u2502\n\u2502  I/O Operations   27,463 ops                                                                      \u2502\n\u2502                   \u251c\u2500\u2500 Read - 1,282 ops (4.67%)                                                    \u2502\n\u2502                   \u251c\u2500\u2500 Write - 2,303 ops (8.39%)                                                   \u2502\n\u2502                   \u2514\u2500\u2500 Metadata - 23,878 ops (86.95%)                                              \u2502\n\u2502  I/O Size         21.18 GiB                                                                       \u2502\n\u2502                   \u251c\u2500\u2500 Read - 20.03 GiB (94.59%)                                                   \u2502\n\u2502                   \u2514\u2500\u2500 Write - 1.15 GiB (5.41%)                                                    \u2502\n\u2502  Read Requests    4 MiB-16 MiB - 1,282 ops                                                        \u2502\n\u2502                   \u2514\u2500\u2500 4-16 MiB - 1,282 ops (100.00%)                                              \u2502\n\u2502  Write Requests   4 kiB-16 MiB - 2,303 ops                                                        \u2502\n\u2502                   \u251c\u2500\u2500 <4 kiB - 397 ops (17.24%)                                                   \u2502\n\u2502                   \u251c\u2500\u2500 4-16 kiB - 1,092 ops (47.42%)                                               \u2502\n\u2502                   \u251c\u2500\u2500 16-64 kiB - 722 ops (31.35%)                                                \u2502\n\u2502                   \u251c\u2500\u2500 64-256 kiB - 1 ops (0.04%)                                                  \u2502\n\u2502                   \u2514\u2500\u2500 4-16 MiB - 91 ops (3.95%)                                                   \u2502\n\u2502  Nodes            1 node                                                                          \u2502\n\u2502  Apps             1 app                                                                           \u2502\n\u2502  Processes/Ranks  1,280 processes                                                                 \u2502\n\u2502  Files            775 files                                                                       \u2502\n\u2502                   \u251c\u2500\u2500 Shared: 38 files (4.90%)                                                    \u2502\n\u2502                   \u2514\u2500\u2500 FPP: 737 files (95.10%)                                                     \u2502\n\u2502  Time Periods     393 time periods (Time Granularity: 10,000,000.0)                               \u2502\n\u2502  Access Pattern   Sequential: 3,585 ops (100.00%) - Random: 0 ops (0.00%)                         \u2502\n\u2502                                                                                                   \u2502\n\u2570\u2500 R: Read - W: Write - M: Metadata  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n"})}),"\n",(0,a.jsx)(n.p,{children:'WisIO also identifies potential I/O bottlenecks. Here is a snippet of the "I/O Bottlenecks" section from the same run:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 I/O Operations per Second: 25 I/O Bottlenecks with 56 Reasons \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                   \u2502\n\u2502  Time View (4 bottlenecks with 7 reasons)                                                         \u2502\n\u2502  \u251c\u2500\u2500 [CR1] 32 processes access 2 files within 1 time period (5) across 32 I/O operations and      \u2502\n\u2502  \u2502   have an I/O time of 2.19 seconds which is 53.26% of overall I/O time of the workload.        \u2502\n\u2502  \u2502   \u2514\u2500\u2500 [Excessive metadata access] Overall 100.00% (2.19 seconds) of I/O time is spent on       \u2502\n\u2502  \u2502       metadata access, specifically 100.00% (2.19 seconds) on the 'open' operation.            \u2502\n\u2502  \u251c\u2500\u2500 [CR2] 1 process accesses 6 files within 1 time period (634) across 40 I/O operations and     \u2502\n\u2502  \u2502   has an I/O time of 0.33 seconds which is 7.97% of overall I/O time of the workload.          \u2502\n\u2502  \u2502   \u251c\u2500\u2500 [Excessive metadata access] Overall 99.35% (0.33 seconds) of I/O time is spent on        \u2502\n\u2502  \u2502   \u2502   metadata access, specifically 99.13% (0.33 seconds) on the 'open' operation.             \u2502\n# ... (further bottleneck details omitted for brevity) ...\n\u2502                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(96540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);