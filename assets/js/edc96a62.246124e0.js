"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[2451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=a,f=d["".concat(o,".").concat(h)]||d[h]||u[h]||r;return t?i.createElement(f,l(l({ref:n},c),{},{components:t})):i.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(7462),a=(t(7294),t(3905));const r={},l=void 0,s={unversionedId:"Jarvis/jarvis-cd/Building-A-Jarvis-Package/Building-A-Jarvis-Package",id:"Jarvis/jarvis-cd/Building-A-Jarvis-Package/Building-A-Jarvis-Package",title:"Building-A-Jarvis-Package",description:"This guide documents how to extend the set of applications that Jarvis is",source:"@site/docs/05-Jarvis/02-jarvis-cd/06-Building-A-Jarvis-Package/06-Building-A-Jarvis-Package.md",sourceDirName:"05-Jarvis/02-jarvis-cd/06-Building-A-Jarvis-Package",slug:"/Jarvis/jarvis-cd/Building-A-Jarvis-Package/",permalink:"/docs/Jarvis/jarvis-cd/Building-A-Jarvis-Package/",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom-Repos",permalink:"/docs/Jarvis/jarvis-cd/Custom-Repos/"},next:{title:"Pipeline-Python-API",permalink:"/docs/Jarvis/jarvis-cd/Pipelines-with-Python/Pipeline-Python-API"}},o={},p=[{value:"5.2.1. pkg_id and global_id",id:"521-pkg_id-and-global_id",level:2},{value:"5.2.2. pkg_dir",id:"522-pkg_dir",level:2},{value:"5.2.3. shared_dir",id:"523-shared_dir",level:2},{value:"5.2.4. private_dir",id:"524-private_dir",level:2},{value:"5.2.5. env",id:"525-env",level:2},{value:"5.2.6. config",id:"526-config",level:2},{value:"5.2.7. jarvis",id:"527-jarvis",level:2},{value:"5.2.8. hostfile",id:"528-hostfile",level:2},{value:"5.2.9. resource_graph",id:"529-resource_graph",level:2},{value:"5.3.1. _init",id:"531-_init",level:2},{value:"5.3.2. _configure_menu",id:"532-_configure_menu",level:2},{value:"5.3.3. configure",id:"533-configure",level:2},{value:"5.3.4. start",id:"534-start",level:2},{value:"5.3.5. stop",id:"535-stop",level:2},{value:"5.3.6. clean",id:"536-clean",level:2},{value:"5.3.7. status",id:"537-status",level:2},{value:"5.4.1. configure",id:"541-configure",level:2},{value:"5.4.2. modify_env",id:"542-modify_env",level:2}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide documents how to extend the set of applications that Jarvis is\nable to deploy. We refer to these as packages (pkgs for short)."),(0,a.kt)("h1",{id:"51-bootstrap-a-pkg"},"5.1. Bootstrap a Pkg"),(0,a.kt)("p",null,"You can bootstrap a pkg to the primary repo as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"jarvis repo create [name] [pkg_class]\n")),(0,a.kt)("p",null,"pkg_class can be one of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"service"),(0,a.kt)("li",{parentName:"ul"},"app"),(0,a.kt)("li",{parentName:"ul"},"interceptor")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"jarvis repo create hermes service\njarvis repo create hermes_mpiio interceptor\njarvis repo create gray_scott app\n")),(0,a.kt)("p",null,"We can then create an example pipeline as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"jarvis pipeline create test\njarvis pipeline append hermes\njarvis pipeline append hermes_mpiio\njarvis pipeline append gray_scott\n")),(0,a.kt)("p",null,"This is an example of a pipeline which will deploy Hermes, the Hermes MPI-IO\ninterceptor, and Gray Scott, which is an application which performs I/O using\nMPI."),(0,a.kt)("h1",{id:"52-the-pkg-base-class"},"5.2. The Pkg Base Class"),(0,a.kt)("p",null,"This section will go over the variables and methods common across all Pkg types.\nThese variables will be initialized automatically."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Pkg:\n  def __init__(self):\n    self.pkg_dir = '...'\n    self.shared_dir = '...'\n    self.private_dir = '...'\n    self.env = {}\n    self.config = {}\n    self.global_id = '...'\n    self.pkg_id = '...'\n")),(0,a.kt)("h2",{id:"521-pkg_id-and-global_id"},"5.2.1. pkg_id and global_id"),(0,a.kt)("p",null,"The Global ID (global_id) is the globally unique ID of the a package in all of\njarvis. It is a dot-separated string. Typically, the format is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{pipeline_id}.{pkg_id}\n")),(0,a.kt)("p",null,"The Package ID (pkg_id) is the unique ID of the package relative to a pipeline.\nThis is a simple string (no dots)."),(0,a.kt)("p",null,"For example, from section 5.1, we appended 3 packages: hermes, hermes_mpiio, and\ngray_scott. hermes, hermes_mpiio, and gray_scott are also the pkg_ids. The\nglobal_ids would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"test.hermes\ntest.hermes_mpiio\ntest.gray_scott\n")),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.global_id\nself.pkg_id\n")),(0,a.kt)("h2",{id:"522-pkg_dir"},"5.2.2. pkg_dir"),(0,a.kt)("p",null,"The package directory is the location of the class python file on the filesystem.\nFor example, when calling ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis repo create hermes"),", the directory\ncreated by this command will be the pkg_dir."),(0,a.kt)("p",null,"One use case for the pkg_dir is for creating template configuration files.\nFor example, OrangeFS has a complex XML configuration which would be a pain\nto repeat in Python. One could include an OrangeFS XML config in their\npackage directory and commit as part of their Jarvis repo."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.pkg_dir\n")),(0,a.kt)("h2",{id:"523-shared_dir"},"5.2.3. shared_dir"),(0,a.kt)("p",null,"The shared_dir is a directory stored on a filesystem common across all nodes\nin the hostfile. Each node has the same view of data in the shared_dir. The\nshared_dir contains data for the specific pkg to avoid conflicts in\na pipeline with multiple pkgs."),(0,a.kt)("p",null,"For example, when deploying Hermes, we assume that each node has the Hermes\nconfiguration file. Each node is expected to have the same configuration file.\nWe store the Hermes config in the shared_dir."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.shared_dir\n")),(0,a.kt)("h2",{id:"524-private_dir"},"5.2.4. private_dir"),(0,a.kt)("p",null,"This is a directory which is common across all nodes, but nodes do not\nhave the same view of data."),(0,a.kt)("p",null,"For example, when deploying OrangeFS, it is required that each node has a file\ncalled pvfs2tab. It essentially stores the protocol + address that OrangeFS\nuses for networking. However, the content of this file is different for\neach node. Storing it in the shared_dir would be incorrect. This is why we\nneed the private_dir."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.private_dir\n")),(0,a.kt)("h2",{id:"525-env"},"5.2.5. env"),(0,a.kt)("p",null,"Jarvis pipelines store the current environment in a YAML file, which represents\na python dictionary. The key is the environment variable name (string) and the\nvalue is the intended meaning of the variable. There is a single environment\nused for the entire pipeline. Each pipeline stores its own environment to avoid\nconflict."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.env['VAR_NAME']\n")),(0,a.kt)("p",null,"Environments can be modified using various helper functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.track_env(env_track_dict)\nself.prepend_env(env_name, val)\nself.setenv(env_name, val)\n")),(0,a.kt)("p",null,"Viewing the env YAML file for the current pipeline from the CLI"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cat `jarvis path`/env.yaml\n")),(0,a.kt)("h2",{id:"526-config"},"5.2.6. config"),(0,a.kt)("p",null,"The Jarvis configuration is stored in ",(0,a.kt)("inlineCode",{parentName:"p"},"{pkg_dir}/{pkg_id}.yaml"),".\nUnlike the environment dict, this stores variables that are specific to\nthe package. They are not global to the pipeline."),(0,a.kt)("p",null,"For example, OrangeFS and Hermes need to know the desired port number and\nRPC protocol. This information is specific to the program, not the entire\npipeline."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.config['VAR_NAME']\n")),(0,a.kt)("h2",{id:"527-jarvis"},"5.2.7. jarvis"),(0,a.kt)("p",null,"The Jarvis CD configuration manager stores various properties global to\nall of Jarvis. The most important information is the hostfile and resource_graph,\ndiscussed in the next sections."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.jarvis\n")),(0,a.kt)("h2",{id:"528-hostfile"},"5.2.8. hostfile"),(0,a.kt)("p",null,"The hostfile contains the set of all hosts that Jarvis has access to.\nThe hostfile format is documented ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scs-lab/jarvis-util/wiki/4.-Hostfile"},"here"),"."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.jarvis.hostfile\n")),(0,a.kt)("h2",{id:"529-resource_graph"},"5.2.9. resource_graph"),(0,a.kt)("p",null,"The resource graph can be queried to get storage and networking information\nfor storing large volumes of data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"self.jarvis.resource_graph\n")),(0,a.kt)("h1",{id:"53-building-a-service-or-application"},"5.3. Building a Service or Application"),(0,a.kt)("p",null,"Services and Applications implement the same interface, but are logically\nslightly different. A service is long-running and would typically require\nthe users to manually stop it. Applications stop automatically when it\nfinishes doing what it's doing. Jarvis can deploy services alongside\napplications to avoid the manual stop when benchmarking."),(0,a.kt)("h2",{id:"531-_init"},"5.3.1. _init"),(0,a.kt)("p",null,"The Jarvis constructor (_init) is used to initialize global variables.\nDon't assume that self.config is initialized.\nThis is to provide an overview of the parameters of this class.\nDefault values should almost always be None."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def _init(self):\n  self.gray_scott_path = None\n")),(0,a.kt)("h2",{id:"532-_configure_menu"},"5.3.2. _configure_menu"),(0,a.kt)("p",null,"The function defines the set of command line options that the user can set.\nAn example configure menu is below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def _configure_menu(self):\n    \"\"\"\n    Create a CLI menu for the configurator method.\n    For thorough documentation of these parameters, view:\n    https://github.com/scs-lab/jarvis-util/wiki/3.-Argument-Parsing\n\n    :return: List(dict)\n    \"\"\"\n    return [\n        {\n            'name': 'port',\n            'msg': 'The port to listen for data on',\n            'type': int,\n            'default': 8080\n        }\n    ]\n")),(0,a.kt)("p",null,"This function is called whenever configuring a package. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"jarvis pkg configure hermes --sleep=10 --port=25\n")),(0,a.kt)("p",null,"This will configure hermes to sleep for 10 seconds after launching to give enough\ntime to fully start Hermes. Sleep is apart of all configure menus by default."),(0,a.kt)("p",null,"The format of the output dict is documented in more detail\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scs-lab/jarvis-util/wiki/3.-Argument-Parsing"},"here"),"."),(0,a.kt)("h2",{id:"533-configure"},"5.3.3. configure"),(0,a.kt)("p",null,"It takes as input a\ndictionary. The keys of this dict are determined from _configure_menu function\noutput. It is responsible for updating the self.config variable appropriately\nand generating the application-specific configuration files."),(0,a.kt)("p",null,"Below is an example for Hermes. This example takes as input the port option,\nmodifies the hermes_server dict, and then stores the dict in a YAML file\nin the shared directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def configure(self, **kwargs):\n    \"\"\"\n    Converts the Jarvis configuration to application-specific configuration.\n    E.g., OrangeFS produces an orangefs.xml file.\n\n    :param config: The human-readable jarvis YAML configuration for the\n    application.\n    :return: None\n    \"\"\"\n    self.update_config(kwargs, rebuild=False)\n    hermes_server_conf = {\n      'port': self.config['port']\n    }\n    YamlFile(f'{self.shared_dir}/hermes_server_yaml').save(hermes_server_conf)\n")),(0,a.kt)("p",null,"This function is called whenever configuring a packge. Specifically, this is\ncalled immediately after _configure_menu. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"jarvis pkg configure hermes --sleep=10 --port=25\n")),(0,a.kt)("p",null,"will make the kwargs dict be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"{\n  'sleep': 10,\n  'port': 25\n}\n")),(0,a.kt)("h2",{id:"534-start"},"5.3.4. start"),(0,a.kt)("p",null,"The start function is called during ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline run")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline start"),".\nThis function should execute the program itself."),(0,a.kt)("p",null,"Below is an example for Hermes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def start(self):\n    \"\"\"\n    Launch an application. E.g., OrangeFS will launch the servers, clients,\n    and metadata services on all necessary pkgs.\n\n    :return: None\n    \"\"\"\n    self.daemon_pkg = Exec('hermes_daemon',\n                            PsshExecInfo(hostfile=self.jarvis.hostfile,\n                                         env=self.env,\n                                         exec_async=True))\n    time.sleep(self.config['sleep'])\n    print('Done sleeping')\n")),(0,a.kt)("h2",{id:"535-stop"},"5.3.5. stop"),(0,a.kt)("p",null,"The stop function is called during ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline run")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline stop"),".\nThis function should terminate the program."),(0,a.kt)("p",null,"Below is an example for Hermes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def stop(self):\n    """\n    Stop a running application. E.g., OrangeFS will terminate the servers,\n    clients, and metadata services.\n\n    :return: None\n    """\n    Exec(\'finalize_hermes\',\n         PsshExecInfo(hostfile=self.jarvis.hostfile,\n                      env=self.env))\n    if self.daemon_pkg is not None:\n        self.daemon_pkg.wait()\n    Kill(\'hermes_daemon\',\n         PsshExecInfo(hostfile=self.jarvis.hostfile,\n                      env=self.env))\n')),(0,a.kt)("p",null,"This is not typically implemented for Applications, but it is for Services."),(0,a.kt)("h2",{id:"536-clean"},"5.3.6. clean"),(0,a.kt)("p",null,"The clean function is called during ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline clean"),".\nIt clears all intermediate data produced by a pipeline."),(0,a.kt)("p",null,"Below is the prototype"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def clean(self):\n    """\n    Destroy all data for an application. E.g., OrangeFS will delete all\n    metadata and data directories in addition to the orangefs.xml file.\n\n    :return: None\n    """\n    pass\n')),(0,a.kt)("h2",{id:"537-status"},"5.3.7. status"),(0,a.kt)("p",null,"The status function is called during ",(0,a.kt)("inlineCode",{parentName:"p"},"jarvis pipeline status"),"\nIt determines whether or not a service is running. This is not typically\nimplemented for Applications, but it is for Services."),(0,a.kt)("h1",{id:"54-building-an-interceptor"},"5.4. Building an Interceptor"),(0,a.kt)("p",null,"Interceptors are used to modify environment variables to route system and library\ncalls to new functions."),(0,a.kt)("p",null,"Interceptors have a slightly different interface -- they only have:\n_init, _configure_menu, configure, and modify_env. The only new function\nhere is modify_env. The others were defined in the previous section and behave\nthe exact same way."),(0,a.kt)("h2",{id:"541-configure"},"5.4.1. configure"),(0,a.kt)("p",null,"Configuring an interceptor tends to be a little different. The interceptors\nare not typically responsible for generating configuration files like the\napplications and services do. These typically are responsible solely for\nmodifying the environment."),(0,a.kt)("p",null,"Below, we show an example of configure for the Hermes MPI I/O interceptor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def configure(self, **kwargs):\n    \"\"\"\n    Converts the Jarvis configuration to application-specific configuration.\n    E.g., OrangeFS produces an orangefs.xml file.\n\n    :param kwargs: Configuration parameters for this pkg.\n    :return: None\n    \"\"\"\n    self.update_config(kwargs, rebuild=False)\n    self.config['HERMES_MPIIO'] = self.find_library('hermes_mpiio')\n    if self.config['HERMES_MPIIO'] is None:\n        raise Exception('Could not find hermes_mpiio')\n    print(f'Found libhermes_mpiio.so at {self.config[\"HERMES_MPIIO\"]}')\n")),(0,a.kt)("p",null,"Here we use self.find_library() to check if we can find the shared library\nhermes_mpiio in the system paths. This function introspects LD_LIBRARY_PATH\nand determines if hermes_mpiio is in the path. It saves the path in the pkg\nconfiguration (self.config)."),(0,a.kt)("h2",{id:"542-modify_env"},"5.4.2. modify_env"),(0,a.kt)("p",null,"Below is an example of the MPI I/O interceptor for Hermes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def modify_env(self):\n    """\n    Modify the jarvis environment.\n\n    :return: None\n    """\n    self.prepend_env(\'LD_PRELOAD\', self.config[\'HERMES_MPIIO\'])\n')),(0,a.kt)("h1",{id:"55-a-note-on-jarvis-util"},"5.5. A Note on Jarvis-Util"),(0,a.kt)("p",null,"Jarvis-cd aims to provide structure to storing configuration files for simplifying\ncomplex benchmarks."),(0,a.kt)("p",null,"Jarvis-util is primarily responsible for handling program execution. This\nincludes things like executing MPI and PSSH in Python. This is where the\nExec and PsshExecInfo data structures come from. More information\non jarvis-util can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scs-lab/jarvis-util/wiki"},"here"),"."))}u.isMDXComponent=!0}}]);