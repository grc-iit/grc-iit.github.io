"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[28106],{35771:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"hpc-tutorials/cpp-introduction/cpp-classes","title":"C++ Classes","description":"In this section, we will discuss the basics of object-oriented programming (OOP)","source":"@site/docs/02-hpc-tutorials/04-cpp-introduction/06-cpp-classes.mdx","sourceDirName":"02-hpc-tutorials/04-cpp-introduction","slug":"/hpc-tutorials/cpp-introduction/cpp-classes","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-classes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C++ Style and Documentation","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-style-and-doc"},"next":{"title":"C++ References and Pointers","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-refs-and-ptrs"}}');var s=r(74848),o=r(28453);const a={},i="C++ Classes",c={},l=[{value:"Defining a Class",id:"defining-a-class",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Destructor",id:"destructor",level:2},{value:"Operator Overloading",id:"operator-overloading",level:2},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Member Access Operators",id:"member-access-operators",level:3},{value:"Function Call",id:"function-call",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"c-classes",children:"C++ Classes"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, we will discuss the basics of object-oriented programming (OOP)\nin C++. A class represents a set of functions (i.e., methods) and data for those\nmethods. An object is an instance of a class."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Class variables"}),"\n",(0,s.jsx)(n.li,{children:"Methods"}),"\n",(0,s.jsx)(n.li,{children:"Encapsulation:"}),"\n",(0,s.jsx)(n.li,{children:"Polymorphism"}),"\n",(0,s.jsx)(n.li,{children:"Inheritance"}),"\n",(0,s.jsx)(n.li,{children:"Operator overloading"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"defining-a-class",children:"Defining a Class"}),"\n",(0,s.jsx)(n.p,{children:"In C++, a class is a user-defined data type that combines data members (variables) and member functions (methods) into a single unit. Classes serve as blueprints for creating objects. Here's a simple example of defining a class in C++:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nusing namespace std;\n\nclass Rectangle {\npublic:\n    // Data members\n    double length;\n    double width;\n\n    // Member functions\n    double area() {\n        return length * width;\n    }\n\n    double perimeter() {\n        return 2 * (length + width);\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(n.p,{children:"Constructors are special member functions used to initialize objects of a class. Here's an example of a constructor for the Rectangle class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'Rectangle::Rectangle(double l, double w) {\n    length = l;\n    width = w;\n}\n\n// Usage\nint main() {\n    Rectangle r(5.0, 3.0); // Creating a Rectangle object with specified dimensions\n    cout << "Area: " << r.area() << endl;\n    cout << "Perimeter: " << r.perimeter() << endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"destructor",children:"Destructor"}),"\n",(0,s.jsx)(n.p,{children:"In C++, a destructor is a special member function that gets called when an object goes out of scope or is explicitly deleted. Here's an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'Rectangle::~Rectangle() {\n    cout << "Rectangle object destroyed" << endl;\n}\n\n// Usage\nint main() {\n    Rectangle r(5.0, 3.0);\n    // r goes out of scope here, and the destructor is called automatically\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"operator-overloading",children:"Operator Overloading"}),"\n",(0,s.jsx)(n.p,{children:"Operator overloading allows you to define how operators like +, -, *, and others behave with objects of your class. Here's an example of overloading the + operator for the Rectangle class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'Rectangle operator+(const Rectangle& r1, const Rectangle& r2) {\n    Rectangle result;\n    result.length = r1.length + r2.length;\n    result.width = r1.width + r2.width;\n    return result;\n}\n\n// Usage\nint main() {\n    Rectangle r1(5.0, 3.0);\n    Rectangle r2(2.0, 4.0);\n    Rectangle sum = r1 + r2; // Using the overloaded + operator\n    cout << "Sum of rectangles: Area=" << sum.area() << ", Perimeter=" << sum.perimeter() << endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,s.jsx)(n.p,{children:"In C++, you can overload assignment operators (=, +=, -=) to define custom behavior for objects of your class during assignment. This allows you to control how your objects are copied or modified."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyNumber {\nprivate:\n    int value;\n\npublic:\n    MyNumber(int v) : value(v) {}\n\n    // Overloading the assignment operator '='\n    MyNumber& operator=(const MyNumber& other) {\n        if (this == &other) // Self-assignment check\n            return *this;\n        \n        value = other.value;\n        return *this;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we overload the assignment operator to ensure that self-assignment is handled gracefully."}),"\n",(0,s.jsx)(n.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,s.jsx)(n.p,{children:"Arithmetic operators like +, -, *, /, and % can be overloaded to define custom arithmetic operations for objects of your class."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Complex {\nprivate:\n    double real;\n    double imaginary;\n\npublic:\n    Complex(double r, double i) : real(r), imaginary(i) {}\n\n    // Overloading the addition operator '+'\n    Complex operator+(const Complex& other) const {\n        return Complex(real + other.real, imaginary + other.imaginary);\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we overload the addition operator to perform complex number addition."}),"\n",(0,s.jsx)(n.h3,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,s.jsxs)(n.p,{children:["Relational operators (",(0,s.jsx)(n.code,{children:"=="}),", ",(0,s.jsx)(n.code,{children:"!="}),", ",(0,s.jsx)(n.code,{children:"<"}),", ",(0,s.jsx)(n.code,{children:">"}),", ",(0,s.jsx)(n.code,{children:"<="}),", ",(0,s.jsx)(n.code,{children:">="}),") can be overloaded to define custom comparison logic for objects of your class."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Student {\nprivate:\n    int id;\n\npublic:\n    Student(int studentId) : id(studentId) {}\n\n    // Overloading the equality operator '=='\n    bool operator==(const Student& other) const {\n        return id == other.id;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we overload the equality operator to compare student objects based on their IDs."}),"\n",(0,s.jsx)(n.h3,{id:"member-access-operators",children:"Member Access Operators"}),"\n",(0,s.jsx)(n.p,{children:"Member access operators (-> and .) can be overloaded to customize how you access members of objects of your class."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyString {\nprivate:\n    char* str;\n\npublic:\n    MyString(char* s) : str(s) {}\n\n    // Overloading the member access operator '->'\n    char operator[](size_t index) const {\n        return str[index];\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we overload the member access operator to access individual characters of a string-like object."}),"\n",(0,s.jsx)(n.h3,{id:"function-call",children:"Function Call"}),"\n",(0,s.jsx)(n.p,{children:"You can overload the function call operator () to make objects of your class callable like functions."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyFunction {\npublic:\n    int operator()(int x, int y) const {\n        return x + y;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we overload the function call operator to create an object that behaves like a function, adding two integers."}),"\n",(0,s.jsx)(n.h3,{id:"bitwise-operators",children:"Bitwise Operators"}),"\n",(0,s.jsxs)(n.p,{children:["Bitwise operators (",(0,s.jsx)(n.code,{children:"&"}),", ",(0,s.jsx)(n.code,{children:"|"}),", ",(0,s.jsx)(n.code,{children:"^"}),", ",(0,s.jsx)(n.code,{children:"~"}),", ",(0,s.jsx)(n.code,{children:"<<"}),", ",(0,s.jsx)(n.code,{children:">>"}),") can be overloaded to define custom bitwise operations for objects of your class."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Bitset {\nprivate:\n    unsigned int data; \n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(96540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);