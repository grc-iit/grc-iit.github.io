"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[478],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(a),c=r,h=p["".concat(l,".").concat(c)]||p[c]||m[c]||i;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3007:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={},o="Distributed Metadata Approach",s={unversionedId:"Hermes/Hermes-components/Metadata-Manager",id:"Hermes/Hermes-components/Metadata-Manager",title:"Distributed Metadata Approach",description:"Metadata is stored in a distributed hash map. In each Hermes Daemon, we",source:"@site/docs/03-Hermes/06-Hermes-components/08-Metadata-Manager.md",sourceDirName:"03-Hermes/06-Hermes-components",slug:"/Hermes/Hermes-components/Metadata-Manager",permalink:"/docs/Hermes/Hermes-components/Metadata-Manager",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hermes-Runtime",permalink:"/docs/Hermes/Hermes-components/Hermes-Runtime"},next:{title:"Prefetcher",permalink:"/docs/Hermes/Hermes-components/Prefetcher"}},l={},d=[{value:"User View",id:"user-view",level:2},{value:"System View",id:"system-view",level:2},{value:"UniqueId",id:"uniqueid",level:2},{value:"Storage Method",id:"storage-method",level:2},{value:"Maps and ID Lists",id:"maps-and-id-lists",level:2},{value:"pros",id:"pros",level:5},{value:"cons",id:"cons",level:5},{value:"Walkthrough of Bucket.Put()",id:"walkthrough-of-bucketput",level:2},{value:"Walkthrough of Bucket.Get()",id:"walkthrough-of-bucketget",level:2},{value:"Limits",id:"limits",level:2}],u={toc:d},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"distributed-metadata-approach"},"Distributed Metadata Approach"),(0,r.kt)("p",null,"Metadata is stored in a distributed hash map. In each Hermes Daemon, we\ninitialize an hipc::unordered_map. The main metadata structures we store\nare as follows: Tag Map (note, Buckets are represented as Tags), Blob Map,\nand Trait Map. These maps typically map an integer ID to an\ninformation structure. For example, the Blob Map maps a BlobId (a 96-bit int)\nto a BlobInfo struct. In addition, we have separate maps for mapping semantic\nstrings to integer IDs. For example, we have a map from a hipc::string to\na BlobId."),(0,r.kt)("p",null,"At this time, metadata is not replicated on nodes and we assume that metadata\ndoesn't grow so large that it exceeds the bounds of main memory."),(0,r.kt)("h2",{id:"user-view"},"User View"),(0,r.kt)("p",null,"Metadata (e.g., Blobs and Tags) can be given semantic names using hipc::strings\nor std::strings. hipc::string is what is eventually stored in Hermes, since it's\ncompatible with shared memory."),(0,r.kt)("h2",{id:"system-view"},"System View"),(0,r.kt)("p",null,"User primitives are referred to by unsigned 96-bit integers (IDs)."),(0,r.kt)("p",null,"Each ID encodes the data it needs to access its metadata."),(0,r.kt)("h2",{id:"uniqueid"},"UniqueId"),(0,r.kt)("p",null,"TagIds, BlobIds, and TraitIds all are instances of a UniqueId. UniqueIds are\nrepresented as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Node ID: The identifier of the node the metadata is on (32-bit)"),(0,r.kt)("li",{parentName:"ul"},"Unique: The unique number of the metadata object (64-bit)")),(0,r.kt)("p",null,"The unique field is a 64-bit integer which is atomically incremented every time\nthe program creates a new metadata object. 64-bit is large enough that the\nprogram should never be able to use all 2^64 combos."),(0,r.kt)("h2",{id:"storage-method"},"Storage Method"),(0,r.kt)("h2",{id:"maps-and-id-lists"},"Maps and ID Lists"),(0,r.kt)("p",null,"All metadata is distributed among nodes by first hashing the key to\ndetermine the node, then hashing again to determine the slot."),(0,r.kt)("h5",{id:"pros"},"pros"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Better load balancing")),(0,r.kt)("h5",{id:"cons"},"cons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"May require extra RPC calls. Initial tests show that this\nindirection should be avoided. ",(0,r.kt)("strong",{parentName:"li"},"TODO:")," We need to revisit this.")),(0,r.kt)("h2",{id:"walkthrough-of-bucketput"},"Walkthrough of Bucket.Put()"),(0,r.kt)("p",null,"1","."," Create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"BlobID"),". The ID's node index (top 32 bits) is created\nby hashing the blob name, and the ID's offset to a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"BufferID"),"s\n(bottom 32 bits) is allocated from the MDM shared memory segment on the\ntarget node."),(0,r.kt)("p",null,"2","."," Add the new ",(0,r.kt)("inlineCode",{parentName:"p"},"BlobID")," to the ",(0,r.kt)("strong",{parentName:"p"},"IdMap"),". This could be local, or an\nRPC."),(0,r.kt)("p",null,"3","."," Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlobID")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bucket"),"'s list of blobs."),(0,r.kt)("h2",{id:"walkthrough-of-bucketget"},"Walkthrough of Bucket.Get()"),(0,r.kt)("p",null,"1","."," Hash the blob name to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlobID"),"."),(0,r.kt)("p",null,"2","."," Get the list of ",(0,r.kt)("inlineCode",{parentName:"p"},"BufferID"),"s from the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlobID"),"."),(0,r.kt)("p",null,"3","."," Read each ",(0,r.kt)("inlineCode",{parentName:"p"},"BufferID"),"'s data into a user buffer."),(0,r.kt)("h2",{id:"limits"},"Limits"),(0,r.kt)("p",null,"There can be a total of 2^64 unique metadata objects. I.e., there can be\na total of 2^64 Tags, Buckets, and Traits."))}m.isMDXComponent=!0}}]);