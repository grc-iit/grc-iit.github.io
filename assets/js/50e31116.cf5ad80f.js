"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[2745],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(f,s(s({ref:t},m),{},{components:r})):n.createElement(f,s({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6988:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},s="Main Scenario",i={unversionedId:"Hermes/Hermes",id:"Hermes/Hermes",title:"Main Scenario",description:"[[../images/Hermes_hierachy.jpg|Deep Distributed Storage Hierarchy (DDSH)]]",source:"@site/docs/03-Hermes/01-Hermes.md",sourceDirName:"03-Hermes",slug:"/Hermes/Hermes",permalink:"/docs/Hermes/Hermes",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hello World",permalink:"/docs/HPC-Tutorials/cpp-introduction/hello-world"},next:{title:"Building Hermes",permalink:"/docs/Hermes/Getting-Started/Getting-Started"}},l={},p=[],m={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"main-scenario"},"Main Scenario"),(0,a.kt)("p",null,"[","[../images/Hermes_hierachy.jpg|Deep Distributed Storage Hierarchy (DDSH)]","]"),(0,a.kt)("p",null,"Consider an HPC cluster equipped with a deep, distributed ",(0,a.kt)("a",{parentName:"p",href:"/docs/Hermes/Hermes-components/Storage-Hierarchy"},"storage\nhierarchy")," (DDSH), the bottom layer of\nwhich is typically a parallel file system (PFS). DDSH was introduced to\nboost or to at least improve the I/O (POSIX, MPI-IO, HDF5, ...)\nperformance of applications performing poorly otherwise. Unfortunately,\nDDSH is not a turn-key solution and difficult to use from a developer's or user's\nperspective. It seems that users are expected to\ntake control, to learn all the necessary DDSH details, and to make the\nnecessary code changes. Even if successful, this is a distraction from\nsolving domain problems and, worse, it will be harder to maintain and\nport the application to other or future systems."),(0,a.kt)("p",null,"The goal of the Hermes project is to provide a ",(0,a.kt)("em",{parentName:"p"},"seamless")," solution that\nutilizes DDSH without or requiring only minor application changes."),(0,a.kt)("p",null,"(Even without a deep DDSH, determined users have created original\nsolutions to overcome I/O performance challenges. See use cases for an example. Many of them can be\nconsidered custom, i.e., application-specific, I/O buffering systems.)"),(0,a.kt)("h1",{id:"how-we-do-it"},"How We Do It"),(0,a.kt)("p",null,"[","[../images/Hermes_Core_Lib_internals.jpg|Hermes Core]","]"),(0,a.kt)("p",null,"We implement an ",(0,a.kt)("em",{parentName:"p"},"I/O buffering system"),"\nwith the following characteristics:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Being seamless, it's a go-between for the by-and-large unmodified\napplications and the PFS. Applications will see a hopefully more\nperformant PFS."),(0,a.kt)("li",{parentName:"ul"},"Users designate certain resources to be used for I/O buffering. Like\nmost buffering systems, it has a finite capacity. When that capacity\nis reached, the buffering system can no longer deliver noticeable\nbenefits and may perform as poorly as (or worse) than the unbuffered\nsystem (going to PFS)."),(0,a.kt)("li",{parentName:"ul"},"Users express I/O priorities, constraints, and hints via buffering policies."),(0,a.kt)("li",{parentName:"ul"},"Given individual or batches of I/O operations (writes and reads),\nthe ",(0,a.kt)("strong",{parentName:"li"},"main challenge")," for such a buffering system is to determine\nwhere in DDSH a given data item is ",(0,a.kt)("b",null,"best/well/optimally-"),"placed at\nthat point in time."),(0,a.kt)("li",{parentName:"ul"},"To that end, the system consists of the following major components:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Data-Placement-Strategies"},"Strategies and algorithms")," that\nimplement policies and facilitate\ndata placement decisions. Speculative data\nplacement for read operations is also known as\n",(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Prefetcher"},"prefetching"),"."),(0,a.kt)("li",{parentName:"ul"},"These strategies work with (dynamic) sets of ",(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Buffering-Target"},"buffering\ntarget"),"s and are applicable more\nbroadly."),(0,a.kt)("li",{parentName:"ul"},"The physical buffering resources are managed in a distributed\n",(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Buffer-Pool"},"buffer pool")," (see also Batching\nSystem)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Buffer-Organizer"},"Buffer Organizer")),(0,a.kt)("li",{parentName:"ul"},"Profiler"),(0,a.kt)("li",{parentName:"ul"},"To separate concerns and for portability, system buffers are\n",(0,a.kt)("strong",{parentName:"li"},"not")," directly exposed to applications. There is a set of\nintermediate primitives targeted by\n",(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Adapters/Adapters"},"adapters")," for different I/O libraries. A\ngeneric ",(0,a.kt)("a",{parentName:"li",href:"/docs/Hermes/Hermes-components/Metadata-Manager"},"metadata manager")," (MDM),\nsupports the bookkeeping needs of the various components."))),(0,a.kt)("li",{parentName:"ul"},"The whole system is deployed in a server-less fashion.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": A buffering system does ",(0,a.kt)("strong",{parentName:"p"},"not")," provide the same semantics as\nstorage."),(0,a.kt)("h1",{id:"other-scenarios-and-use-cases"},"Other Scenarios and Use Cases"),(0,a.kt)("p",null,"Our main scenario, a parallel application running on an HPC system and\nwriting files to a parallel file system, might be referred to as\noperating in Hermes ",(0,a.kt)("strong",{parentName:"p"},"persistent mode."),' This might be extended to\nmultiple applications "communicating" via the PFS. Another important\nscenario and set of use cases include applications that operate in a\nmore ',(0,a.kt)("strong",{parentName:"p"},"transient mode"),': they tend to produce massive amounts of\ntemporary data that need not be persisted in a PFS after the application\ncompletes. With DDSH, the use of PFS appears as a matter of last resort\n("out-of-core"), and an I/O buffering system might offer a more\nperformant solution.'),(0,a.kt)("p",null,"DDSH are by no means limited to HPC clusters. Today, cloud-based VMs\nfrom major providers offer half a dozen or more storage options and\nmultiple interconnects. Since customers/users have the ability to\ncustomize the target system, it may seem that good I/O performance might\nbe a little easier to achieve. In practice, the picture is more\ncomplicated. For one, this is no longer just a technical decision, but\neconomic considerations (price and supply) play an important role. To\nwrite applications that perform well across a fleet of instance types\nand storage options is almost more challenging than to target a\nby-comparison stable HPC system. The concepts and techniques behind\nHermes are by no means specific to HPC systems and their suitability\nshould be examined in cloud-based environments."),(0,a.kt)("h1",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://par.nsf.gov/servlets/purl/10063843"},"Hermes: a heterogeneous-aware multi-tiered distributed I/O\nbuffering system")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://drive.google.com/drive/u/0/folders/0ALuH0a_m3nGWUk9PVA"},"Google\nDrive"))))}u.isMDXComponent=!0}}]);