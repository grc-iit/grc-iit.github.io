"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[34083],{84768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"hpc-tutorials/cpp-introduction/cpp-build-with-cmake","title":"Building C++ with CMake","description":"Now that we have seen how to compile C++ code manually, we will discuss","source":"@site/docs/02-hpc-tutorials/04-cpp-introduction/03-cpp-build-with-cmake.mdx","sourceDirName":"02-hpc-tutorials/04-cpp-introduction","slug":"/hpc-tutorials/cpp-introduction/cpp-build-with-cmake","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-build-with-cmake","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building C++ Code Manually","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-build-manually"},"next":{"title":"C++ Basic Syntax","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-basic-syntax"}}');var s=t(74848),l=t(28453),a=t(2558);const r={},o="Building C++ with CMake",c={},d=[{value:"Setup",id:"setup",level:2},...a.RM,{value:"Basic C++ Repo Structure",id:"basic-c-repo-structure",level:2},{value:"Building a CMake Project",id:"building-a-cmake-project",level:2},{value:"Top-Level (or Root) CMakeLists.txt",id:"top-level-or-root-cmakeliststxt",level:2},{value:"CMake Preamble",id:"cmake-preamble",level:3},{value:"Global Compiler Flags",id:"global-compiler-flags",level:3},{value:"Build Options",id:"build-options",level:3},{value:"Output Directories",id:"output-directories",level:3},{value:"Locating Dependencies",id:"locating-dependencies",level:3},{value:"Enable Testing",id:"enable-testing",level:3},{value:"Directory Descent",id:"directory-descent",level:3},{value:"src/CMakeLists.txt",id:"srccmakeliststxt",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"building-c-with-cmake",children:"Building C++ with CMake"})}),"\n",(0,s.jsx)(n.p,{children:"Now that we have seen how to compile C++ code manually, we will discuss\nbuild automation using CMake. Generally, compiling manually is bad\nbecause it's difficult for someone to download your repo and just\nbuild it. Building the repo should not be burdensome."}),"\n",(0,s.jsx)(n.p,{children:"The main objectives of this tutorial are as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Describe the structure of a proper C++ repo"}),"\n",(0,s.jsx)(n.li,{children:"Show how to use CMake to compile a C++ repo"}),"\n",(0,s.jsx)(n.li,{children:"Demonstrate how to build a basic CMakeLists.txt"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We will re-use the example from ",(0,s.jsx)(n.a,{href:"/docs/hpc-tutorials/cpp-introduction/cpp-build-manually",children:"Building C++ Manually"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n","\n",(0,s.jsx)(a.Ay,{}),"\n",(0,s.jsx)(n.p,{children:"Go to the tutorial:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd grc-tutorial\nexport GRC_TUTORIAL=${PWD}\ncd ${GRC_TUTORIAL}/cpp/03-cpp-build-with-cmake\n"})}),"\n",(0,s.jsx)(n.p,{children:"Next perform:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"spack install boost\nspack load boost\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-c-repo-structure",children:"Basic C++ Repo Structure"}),"\n",(0,s.jsx)(n.p,{children:"Generally, a C++ repo will contain at least the following directories"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"include: where public header files go"}),"\n",(0,s.jsx)(n.li,{children:"src: where private source and header files go"}),"\n",(0,s.jsx)(n.li,{children:"test: where unit tests go"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Note: A unit test is just a program which validates the correctness\nof some component of your program."}),"\n",(0,s.jsx)(n.p,{children:"In CMake, build configurations are stored in files called CMakeLists.txt.\nIn each directory which has source code or contains a directory which\nhas source code, there should be a file called CMakeLists.txt. The\nCMakeLists.txt is responsible for determining which source codes are\nused for building a library or executable, dependencies, etc."}),"\n",(0,s.jsx)(n.h2,{id:"building-a-cmake-project",children:"Building a CMake Project"}),"\n",(0,s.jsx)(n.p,{children:"To build this project, do the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/03-cpp-build-with-cmake\nmkdir build\ncd build\n# CMake will produce a Makefile (in this case)\ncmake ../\n# Use make to build\nmake -j8\n"})}),"\n",(0,s.jsx)(n.p,{children:"CMake is a build system generator, so it doesn't always need to\nbe a makefile which gets produced. It could also be something\nlike ninja. But generally it is make on Linux systems."}),"\n",(0,s.jsx)(n.h2,{id:"top-level-or-root-cmakeliststxt",children:"Top-Level (or Root) CMakeLists.txt"}),"\n",(0,s.jsx)(n.p,{children:"First we will look at the CMakeLists.txt file in the project's root\ndirectory. Generally, the root CMake is responsible for the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Finding packages (e.g., shared libraries) which are relevant to the build"}),"\n",(0,s.jsx)(n.li,{children:"Defining user configuration options"}),"\n",(0,s.jsx)(n.li,{children:"Setting variables global to the build"}),"\n",(0,s.jsx)(n.li,{children:"Setting compiler flags (e.g., optimization)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we will describe our root ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/grc-tutorial/blob/main/cpp/03-cpp-build-with-cmake/CMakeLists.txt",children:"CMakeLists.txt"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"cmake-preamble",children:"CMake Preamble"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"cmake_minimum_required (VERSION 3.10)\nproject(MyFirstCMake)\nset(CMAKE_CXX_STANDARD 17)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here we require a minimum of CMake 3.10. This will cause CMake to fail\nif the installed version is too old."}),"\n",(0,s.jsxs)(n.p,{children:["We also set the name of this project to be MyFirstCMake. The ",(0,s.jsx)(n.em,{children:"project"}),"\nfunction will set the name of this project and store it in the variable\nPROJECT_NAME. Calling from the top-level CMakeLists.txt also stores the project\nname in the variable CMAKE_PROJECT_NAME."]}),"\n",(0,s.jsx)(n.h3,{id:"global-compiler-flags",children:"Global Compiler Flags"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'#------------------------------------------------------------------------------\n# Compiler optimization\n#------------------------------------------------------------------------------\nadd_compile_options("-fPIC")\nif (CMAKE_BUILD_TYPE STREQUAL "Debug")\n  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")\nelseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")\n  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")\nelseif(CMAKE_BUILD_TYPE STREQUAL "Release")\n  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -03")\nelse()\n  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -03")\nendif()\n'})}),"\n",(0,s.jsx)(n.p,{children:"CMake defines the following variables automatically:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"CMAKE_CXX_STANDARD: The C++ version. For now C++17."}),"\n",(0,s.jsx)(n.li,{children:"CMAKE_BUILD_TYPE: What mode to build your project in. Typically\nthis indicates compiler optimization. Default is usually RelWithDebInfo"}),"\n",(0,s.jsx)(n.li,{children:"CMAKE_CXX_FLAGS: Flags to pass to the compiler. By default, this\nwill be equivalent to the CXX_FLAGS environment variable from the\nshell CMake gets executed in."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In this example, we define four CMAKE_BUILD_TYPES:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Debug: no compiler optimization"}),"\n",(0,s.jsx)(n.li,{children:"RelWithDebInfo: moderate compiler optimization"}),"\n",(0,s.jsx)(n.li,{children:"Release: heavy compiler optimization"}),"\n",(0,s.jsx)(n.li,{children:"Everything else: same as Release"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These build types are very common in CMake projects."}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.a,{href:"/docs/hpc-tutorials/cpp-introduction/cpp-build-manually",children:"Building C++ Manually"}),", we mentioned that the -fPIC flag was required when\nbuilding a shared library. In CMake this flag can be added to all\nlibraries as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'add_compile_options("-fPIC")\n'})}),"\n",(0,s.jsx)(n.p,{children:"For each CMake build type, we also enable different levels of optimization.\nFor example, with Debug we disabled compiler optimization as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Setting CMAKE_CXX_FLAGS and add_compile_options are effectively the same thing.\nIn this case, it would also be equivalent (and actually encouraged) to write:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'add_compile_options("-O0")\n'})}),"\n",(0,s.jsx)(n.p,{children:"However, in many C++ projects people will set CMAKE_CXX_FLAGS. The main\ndifference between the two approaches is that CMAKE_CXX_FLAGS will apply\nglobally, even if set in a lower-level CMakeLists.txt. This is partially due to\nhistorical reasons."}),"\n",(0,s.jsx)(n.h3,{id:"build-options",children:"Build Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'option(BUILD_TESTING "Build testing kits" OFF)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The option command allows users to configure the build. In this case, we include\na flag which indicates whether or not to build unit tests. In many cases, users\nwon't want to take the time to test code unless there are potential\nportability issues. By default, this value is set to OFF. The alternative is to\nset it to ON."}),"\n",(0,s.jsx)(n.p,{children:"CMake options are passed to CMake using the -D flag. To build this project with testing, do the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/03-cpp-build-with-cmake\nmkdir build\ncd build\n# Enable testing\ncmake ../ -DBUILD_TESTING=ON\n# Build\nmake -j8\n"})}),"\n",(0,s.jsx)(n.h3,{id:"output-directories",children:"Output Directories"}),"\n",(0,s.jsx)(n.p,{children:"In this section, we will describe how to define where CMake should output\nexecutables and shared objects."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:'#------------------------------------------------------------------------------\n# Setup CMake Output Directories\n#------------------------------------------------------------------------------\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n        ${CMAKE_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables.")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n        ${CMAKE_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n        ${CMAKE_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries.")\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CMAKE_RUNTIME_OUTPUT_DIRECTORY: output for executables"}),"\n",(0,s.jsx)(n.li,{children:"CMAKE_LIBRARY_OUTPUT_DIRECTORY: output for shared libraries"}),"\n",(0,s.jsx)(n.li,{children:"CMAKE_ARCHIVE_OUTPUT_DIRECTORY: output for static libraries (not important for us)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["CMAKE_BINARY_DIR is automatically provided by CMake. This is the absolute\npath to the directory which contains the root CMake. In our case, this would\nbe ",(0,s.jsx)(n.code,{children:"cd ${GRC_TUTORIAL}/cpp/03-cpp-build-with-cmake"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In this example, we output all executables and shared objects to the bin\ndirectory."}),"\n",(0,s.jsx)(n.h3,{id:"locating-dependencies",children:"Locating Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"#-----------------------------------------------------------------------------\n# Dependencies common to all subdirectories\n#-----------------------------------------------------------------------------\nfind_package(Boost COMPONENTS system filesystem REQUIRED)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"find_package"})," is used to locate packages installed on the system by parsing the\nenvironment variable CMAKE_PREFIX_PATH. CMAKE_PREFIX_PATH must contain the paths\nto .cmake (not .txt) files which actually load the package information. This\nvariable is often set by spack when loading packages."]}),"\n",(0,s.jsx)(n.h3,{id:"enable-testing",children:"Enable Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"#-----------------------------------------------------------------------------\n# Enable Testing\n#-----------------------------------------------------------------------------\ninclude(CTest)\nif(CMAKE_PROJECT_NAME STREQUAL MyFirstCMake AND BUILD_TESTING)\n  enable_testing()\nendif()\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code will enable the ability to use a functionality called CTest.\nCTests are used for automating unit tests for C++ projects. In our\ncase, this is only enabled when BUILD_TESTING is ON."}),"\n",(0,s.jsx)(n.h3,{id:"directory-descent",children:"Directory Descent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cmake",children:"#-----------------------------------------------------------------------------\n# Source\n#-----------------------------------------------------------------------------\nadd_subdirectory(src)\n\n#-----------------------------------------------------------------------------\n# Testing Sources\n#-----------------------------------------------------------------------------\nif(CMAKE_PROJECT_NAME STREQUAL MyFirstCMake AND BUILD_TESTING)\n  add_subdirectory(test)\nendif()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There is no source code in the root directory for this project. In\norder to get to the source code, we must go into the src and test\ndirectories. ",(0,s.jsx)(n.em,{children:"add_subdirectory"})," will tell CMake to go to a specific\ndirectory and execute the CMakeLists.txt in that subdirectory."]}),"\n",(0,s.jsx)(n.h2,{id:"srccmakeliststxt",children:"src/CMakeLists.txt"}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we will discuss ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/grc-tutorial/blob/main/cpp/03-cpp-build-with-cmake/src/CMakeLists.txt",children:"src/CMakeLists.txt"}),".\nThis CMake file is responsible for defining how to build + install the\nsource code in this repo."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},2558:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>r});var i=t(74848),s=t(28453),l=t(11470),a=t(19365);const r=[];function o(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(a.A,{value:"docker",label:"Docker",default:!0,children:[(0,i.jsx)(n.p,{children:"You can get the iowarp container to reduce dependency install times:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/iowarp/iowarp-install.git\ndocker pull iowarp/iowarp-user:latest\ncd iowarp-install/docker/user\ndocker compose up -d  # Only for recent dockers\ndocker-compose up -d  # Only for older dockers\n"})}),(0,i.jsx)(n.p,{children:"To connect to the container:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker exec -it iowarp bash\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Docker does not save state. So when you build tutorials or create your own code,\nthe data gets lost when the container shuts down."})})]}),(0,i.jsx)(a.A,{value:"linux",label:"Linux",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/grc-iit/grc-tutorial.git\n"})})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var i=t(34164);const s={tabItem:"tabItem_Ymn6"};var l=t(74848);function a({children:e,hidden:n,className:t}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,t),hidden:n,children:e})}},11470:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(96540),s=t(34164),l=t(23104),a=t(56347),r=t(205),o=t(57485),c=t(31682),d=t(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,l=h(e),[a,o]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[c,u]=m({queryString:t,groupId:s}),[b,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,i.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),f=(()=>{const e=c??b;return p({value:e,tabValues:l})?e:null})();(0,r.A)((()=>{f&&o(f)}),[f]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,l]),tabValues:l}}var x=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function C({className:e,block:n,selectedValue:t,selectValue:i,tabValues:a}){const r=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),c=e=>{const n=e.currentTarget,s=r.indexOf(n),l=a[s].value;l!==t&&(o(n),i(l))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:i})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{r.push(e)},onKeyDown:d,onClick:c,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function j({lazy:e,children:n,selectedValue:t}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function k(e){const n=b(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(C,{...n,...e}),(0,g.jsx)(j,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,g.jsx)(k,{...e,children:u(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);