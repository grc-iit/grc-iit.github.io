"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[88398],{83814:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"iowarp/components/ipc/utilities/singleton","title":"Singleton","description":"This library provides generic singleton classes that are generally useful.","source":"@site/docs/11-iowarp/03-components/02-ipc/05-utilities/01-singleton.md","sourceDirName":"11-iowarp/03-components/02-ipc/05-utilities","slug":"/iowarp/components/ipc/utilities/singleton","permalink":"/docs/iowarp/components/ipc/utilities/singleton","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Thread","permalink":"/docs/iowarp/components/ipc/thread"},"next":{"title":"Compress","permalink":"/docs/iowarp/components/ipc/utilities/compress"}}');var o=i(74848),l=i(28453);const s={},a="Singleton",r={},c=[{value:"Traditional Singleton",id:"traditional-singleton",level:2},{value:"GPU-Compatible Singleton",id:"gpu-compatible-singleton",level:2},{value:"Global Singleton",id:"global-singleton",level:2},{value:"GPU-Compatible Global Singleton",id:"gpu-compatible-global-singleton",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"singleton",children:"Singleton"})}),"\n",(0,o.jsx)(e.p,{children:"This library provides generic singleton classes that are generally useful."}),"\n",(0,o.jsx)(e.h2,{id:"traditional-singleton",children:"Traditional Singleton"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"/**\n * A class to represent singleton pattern\n * Does not require specific initialization of the static variable\n * */\ntemplate <typename T, bool WithLock>\nclass SingletonBase {\n public:\n  static T *GetInstance();\n};\n\n/** Singleton default case declaration */\ntemplate <typename T>\nusing Singleton = SingletonBase<T, true>;\n\n/** Singleton without lock declaration */\ntemplate <typename T>\nusing LockfreeSingleton = SingletonBase<T, false>;\n"})}),"\n",(0,o.jsx)(e.p,{children:"This is probably the most common singleton class."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"Singleton"}),": A thread-safe singleton. The first\naccess to the singleton is protected by a lock. This\nlock is not a scalability concern as it happens only\nthe first time the singleton is created."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"LockfreeSingleton"}),": For singletons that are\ninitialized in an obvious way in your program. Not\nprotected with an initialization lock. May improve\nperformance very slightly by avoiding additional\ncode paths."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"gpu-compatible-singleton",children:"GPU-Compatible Singleton"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"/**\n * A class to represent singleton pattern\n * Does not require specific initialization of the static variable\n * */\ntemplate <typename T, bool WithLock>\nclass CrossSingletonBase {\n public:\n  HSHM_INLINE_CROSS_FUN\n  static T *GetInstance();\n};\n\n/** Singleton default case declaration */\ntemplate <typename T>\nusing CrossSingleton = CrossSingletonBase<T, true>;\n\n/** Singleton without lock declaration */\ntemplate <typename T>\nusing LockfreeCrossSingleton = CrossSingletonBase<T, false>;\n"})}),"\n",(0,o.jsx)(e.p,{children:"This singleton can be compiled to work on GPU. Similar to\nthe traditional singleton."}),"\n",(0,o.jsx)(e.h2,{id:"global-singleton",children:"Global Singleton"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"/**\n * Makes a singleton. Constructs during initialization of program.\n * Does not require specific initialization of the static variable.\n * */\ntemplate <typename T>\nclass GlobalSingleton {\n private:\n  static T obj_;\n\n public:\n  static T *GetInstance();\n};\ntemplate <typename T>\nT GlobalSingleton<T>::obj_;\n"})}),"\n",(0,o.jsx)(e.p,{children:"The main difference between this singleton and the traditional\nis the time at which it is created. This singleton is intialized\nwhen the program loads, unlike the traditional singleton which\nmust wait until the first time it is called."}),"\n",(0,o.jsx)(e.p,{children:"The global singleton does not need to be protected by a lock\nunder any circumstance since its initialization point is known."}),"\n",(0,o.jsx)(e.h2,{id:"gpu-compatible-global-singleton",children:"GPU-Compatible Global Singleton"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"/**\n * Makes a singleton. Constructs during initialization of program.\n * Does not require specific initialization of the static variable.\n * */\n#ifdef HSHM_IS_HOST\ntemplate <typename T>\nclass GlobalCrossSingleton {\n private:\n  static T obj_;\n\n public:\n  static T *GetInstance();\n};\ntemplate <typename T>\nT GlobalCrossSingleton<T>::obj_;\n#else\ntemplate <typename T>\nusing GlobalCrossSingleton = LockfreeCrossSingleton<T>;\n#endif\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["This is effectively the same thing as the ",(0,o.jsx)(e.code,{children:"GlobalSingleton"}),".\nThe main difference is that the same code could compile\non GPU now."]})]})}function d(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var t=i(96540);const o={},l=t.createContext(o);function s(n){const e=t.useContext(l);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);