"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[7070],{731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"iowarp/shared-memory/utilities/encrypt","title":"Encryption","description":"HSHM provides an interface to encryption libraries when built with encrypt support.","source":"@site/docs/07-iowarp/01-shared-memory/05-utilities/03-encrypt.md","sourceDirName":"07-iowarp/01-shared-memory/05-utilities","slug":"/iowarp/shared-memory/utilities/encrypt","permalink":"/docs/iowarp/shared-memory/utilities/encrypt","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Compress","permalink":"/docs/iowarp/shared-memory/utilities/compress"},"next":{"title":"Timer","permalink":"/docs/iowarp/shared-memory/utilities/timer"}}');var i=t(4848),s=t(8453);const o={},c="Encryption",a={},d=[{value:"API",id:"api",level:2},{value:"Example",id:"example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"encryption",children:"Encryption"})}),"\n",(0,i.jsx)(n.p,{children:"HSHM provides an interface to encryption libraries when built with encrypt support."}),"\n",(0,i.jsx)(n.p,{children:"Currently, there are two supported:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"AES"}),"\n",(0,i.jsx)(n.li,{children:"Blowfish"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For now, we do not abstract compression libraries behind a class like the compression\nones. When we integrate more, we will see the commonalities between them to do this."}),"\n",(0,i.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(n.p,{children:"Both blowfish and AES have the same structure."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'class AES {\n public:\n  std::string key_;\n  std::string iv_;\n  std::string salt_;\n\n public:\n  void CreateInitialVector(const std::string &salt = "");\n\n  void GenerateKey(const std::string &password);\n\n  bool Encrypt(char *output, size_t &output_size, char *input,\n               size_t input_size);\n\n  bool Decrypt(char *output, size_t &output_size, char *input,\n               size_t input_size);\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Below is an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include "hermes_shm/util/encrypt/encrypt.h"\n\nint main() {\n    hshm::AES crypto;\n    crypto.GenerateKey("passwd");\n    size_t encoded_size = 8192 + 256, decoded_size = 8192;\n    std::vector<char> data(8192, 0), encoded(8192 + 256, 1),\n        decoded(8192 + 256, 2);\n    crypto.CreateInitialVector();\n    crypto.Encrypt(encoded.data(), encoded_size, data.data(), data.size());\n    crypto.Decrypt(decoded.data(), decoded_size, encoded.data(), encoded_size);\n    decoded.resize(decoded_size);\n    REQUIRE(data == decoded);\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);