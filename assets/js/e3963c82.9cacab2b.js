"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[8795],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>d});var n=o(7294);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,l=function(e,t){if(null==e)return{};var o,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(l[o]=e[o]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}var s=n.createContext({}),c=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(o),h=l,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||r;return o?n.createElement(d,a(a({ref:t},p),{},{components:o})):n.createElement(d,a({ref:t},p))}));function d(e,t){var o=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=o.length,a=new Array(r);a[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,a[1]=i;for(var c=2;c<r;c++)a[c]=o[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},8088:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=o(7462),l=(o(7294),o(3905));const r={},a="1.1 Exec",i={unversionedId:"Jarvis/Jarvis-utils/Program-execution/Program-execution",id:"Jarvis/Jarvis-utils/Program-execution/Program-execution",title:"1.1 Exec",description:"Exec is used to execute a binary program as a subprocess in Python. Exec can be used for local, remote, or parallel execution of code. Exec is currently a wrapper around the following libraries:",source:"@site/docs/05-Jarvis/01-Jarvis-utils/02-Program-execution/02-Program-execution.md",sourceDirName:"05-Jarvis/01-Jarvis-utils/02-Program-execution",slug:"/Jarvis/Jarvis-utils/Program-execution/",permalink:"/docs/Jarvis/Jarvis-utils/Program-execution/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"jarvis-util",permalink:"/docs/Jarvis/Jarvis-utils/jarvis-util/"},next:{title:"Builtin-Wrappers",permalink:"/docs/Jarvis/Jarvis-utils/Builtin-Wrappers/"}},s={},c=[{value:"1.2.1. Specifying execution method (e.g., SSH vs MPI)",id:"121-specifying-execution-method-eg-ssh-vs-mpi",level:2},{value:"1.2.2. Managing output from commands",id:"122-managing-output-from-commands",level:2},{value:"1.2.3. Asynchronous execution",id:"123-asynchronous-execution",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...o}=e;return(0,l.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"11-exec"},"1.1 Exec"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\n")),(0,l.kt)("p",null,"Exec is used to execute a binary program as a subprocess in Python. Exec can be used for local, remote, or parallel execution of code. Exec is currently a wrapper around the following libraries:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Subprocess: executes a program locally on a machine. We use shell=True here. The intention is to be equivalent to a bash script."),(0,l.kt)("li",{parentName:"ol"},'SSH: executes a program remotely using SSH. This has only been tested on Linux. It is equivalent to executing "ssh" in the terminal.'),(0,l.kt)("li",{parentName:"ol"},"Parallel SSH (PSSH): executes a program on multiple remote hosts. Relies upon the SSH module. "),(0,l.kt)("li",{parentName:"ol"},"Message Passing Interface (MPI): executes a program in parallel using MPI. Only tested over MPICH at this time.")),(0,l.kt)("p",null,"Exec has a simple syntax. It takes as input a command (cmd) and how the command should be executed (exec_info). For example, exec_info can be used to represent executing the command in parallel using MPI or locally on a machine using subprocess."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nExec(cmd, exec_info)\n")),(0,l.kt)("p",null,'Exec can be called with only specifying "cmd". In this case, the command will be executed locally. It\'s output will be printed to the terminal.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nExec(cmd)\n")),(0,l.kt)("h1",{id:"12-execinfo"},"1.2. ExecInfo"),(0,l.kt)("p",null,"ExecInfo stores all information which may be needed to execute a command with a particular protocol. This includes information such as the location of private/public keys, hostfiles, environment variables. ExecInfo also includes parameters for collecting output from commands. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ExecInfo(exec_type=ExecType.LOCAL, nprocs=None, ppn=None,\n         user=None, pkey=None, port=None, hostfile=None, env=None,\n         sleep_ms=0, sudo=False, cwd=None, hosts=None,\n         collect_output=None, pipe_stdout=None, pipe_stderr=None,\n         hide_output=None, exec_async=False, stdin=None)\n")),(0,l.kt)("h2",{id:"121-specifying-execution-method-eg-ssh-vs-mpi"},"1.2.1. Specifying execution method (e.g., SSH vs MPI)"),(0,l.kt)("p",null,"There are many ways to execute a command: Subprocess, SSH, etc. To specify this, there is an enum with all currently supported methods. The supported methods are:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"ExecType.LOCAL"),(0,l.kt)("li",{parentName:"ol"},"ExecType.SSH"),(0,l.kt)("li",{parentName:"ol"},"ExecType.PSSH"),(0,l.kt)("li",{parentName:"ol"},"ExecType.MPI")),(0,l.kt)("p",null,'Setting "exec_type" will spawn the command using the particular approach. By default, "exec_type" is ExecType.LOCAL.'),(0,l.kt)("h2",{id:"122-managing-output-from-commands"},"1.2.2. Managing output from commands"),(0,l.kt)("p",null,"ExecInfo has three parameters for collecting output from commands:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"collect_output: whether to store the output from the command in a buffer in Python. Will impact memory utilization if the command has large output. This is false by default."),(0,l.kt)("li",{parentName:"ol"},"pipe_stdout: store stdout in a file. By default, this is None."),(0,l.kt)("li",{parentName:"ol"},"pipe_stderr: store stderr in a file. By default, this is None."),(0,l.kt)("li",{parentName:"ol"},"hide_output: Don't print output.")),(0,l.kt)("p",null,"Unlike typical subprocess, you can perform any combination of these. Output can be collected at the same time it's being printed. This is particularly useful if you have a long-running process you want to collect output from AND ensure is still progressing. This is accomplished by spawning two threads: one for collecting stderr, and another for collecting stdout."),(0,l.kt)("h2",{id:"123-asynchronous-execution"},"1.2.3. Asynchronous execution"),(0,l.kt)("p",null,'ExecInfo enables the ability to execute a command asynchronously. This is particularly useful for running a daemon. For example, deploying a storage system requires the storage system to run as a service. This can cause the program to block forever unless asynchronous execution is enabled. Async execution is specified using the "exec_async=True".'),(0,l.kt)("h1",{id:"13-localexec"},"1.3. LocalExec"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo\n")),(0,l.kt)("p",null,"The simplest way to execute a program locally is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nnode = Exec('echo hello')\n")),(0,l.kt)("p",null,'This will print "hello" to the console.'),(0,l.kt)("p",null,"However, if more control is needed, a LocalExecInfo contains many helpful paramters.\nThe following demonstrates various examples of outputs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo \n\n# Will ONLY print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=False))\n# Will collect AND print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True))\n# Will collect BUT NOT print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True,\n                                        hide_output=True))\n# Will collect, pipe to file, and print to terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True,\n                                        pipe_stdout='/tmp/stdout.txt',\n                                        pipe_stderr='/tmp/stderr.txt'))\n")),(0,l.kt)("p",null,"To execute a program asynchronously, one can do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo \n\nnode = Exec('echo hello', LocalExecInfo(exec_async=True))\nnode.wait()\n")),(0,l.kt)("h1",{id:"14-sshexec"},"1.4. SshExec"),(0,l.kt)("p",null,'The following code will execute the "hostname" command on the local host using SSH.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.ssh_exec import SshExecInfo \n\nnode = Exec('hostname', SshExecInfo(hosts='localhost'))\n")),(0,l.kt)("h1",{id:"15-psshexec"},"1.5. PsshExec"),(0,l.kt)("p",null,'The following code will execute the "hostname" command on all machines in the hostfile'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.pssh_exec import PsshExecInfo \n\nnode = Exec('hostname', PsshExecInfo(hostfile=\"/tmp/hostfile.txt\"))\n")),(0,l.kt)("h1",{id:"16-mpiexec"},"1.6. MpiExec"),(0,l.kt)("p",null,'The following code will execute the "hostname" command on the local machine 24 times using MPI.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.mpi_exec import MpiExecInfo \n\nnode = Exec('hostname', MpiExecInfo(hostfile=None,\n                                    nprocs=24,\n                                    ppn=None))\n")),(0,l.kt)("p",null,'The following code will execute the "hostname" command on 4 nodes (specified in hostfile) using MPI.\n"ppn" stands for processes per node.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.mpi_exec import MpiExecInfo \n\nnode = Exec('hostname', MpiExecInfo(hostfile=\"/tmp/hostfile.txt\",\n                                    nprocs=4,\n                                    ppn=1))\n")))}m.isMDXComponent=!0}}]);