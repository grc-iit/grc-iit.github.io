"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[7386],{66292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"iowarp/ipc/shared-memory","title":"Shared Memory Allocators","description":"This section gives an example of how to use allocators in shared memory.","source":"@site/docs/11-iowarp/02-ipc/03-shared-memory.md","sourceDirName":"11-iowarp/02-ipc","slug":"/iowarp/ipc/shared-memory","permalink":"/docs/iowarp/ipc/shared-memory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Memory Abstractions","permalink":"/docs/iowarp/ipc/abstractions"},"next":{"title":"Introspect","permalink":"/docs/iowarp/ipc/introspect"}}');var o=n(74848),a=n(28453);const s={},c="Shared Memory Allocators",l={},i=[{value:"Test Function",id:"test-function",level:2},{value:"Create Shared Memory",id:"create-shared-memory",level:2},{value:"Connect to shared memory",id:"connect-to-shared-memory",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"shared-memory-allocators",children:"Shared Memory Allocators"})}),"\n",(0,o.jsx)(t.p,{children:"This section gives an example of how to use allocators in shared memory.\nWe use MPI as a way to spawn multiple processes. The objective of this\ntutorial is to show how shared memory allocators are setup."}),"\n",(0,o.jsx)(t.h2,{id:"test-function",children:"Test Function"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"template <typename AllocT>\nAllocT *TestAllocatorMpi() {\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  if (rank == 0) {\n    PretestRank0<AllocT>();\n  }\n  MPI_Barrier(MPI_COMM_WORLD);\n  if (rank != 0) {\n    PretestRankN();\n  }\n  return HSHM_MEMORY_MANAGER->GetAllocator<AllocT>(alloc_id);\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"This is the main function that will be called.\nPretestRank0 will be called only on rank 0.\nPretestRankN is called on every other rank."}),"\n",(0,o.jsx)(t.h2,{id:"create-shared-memory",children:"Create Shared Memory"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'template <typename AllocT>\nvoid PretestRank0() {\n  std::string shm_url = "test_allocators";\n  AllocatorId alloc_id(1, 0);\n  auto mem_mngr = HSHM_MEMORY_MANAGER;\n  mem_mngr->CreateBackend<PosixShmMmap>(hipc::MemoryBackendId::Get(0),\n                                        hshm::Unit<size_t>::Megabytes(100),\n                                        shm_url);\n  mem_mngr->CreateAllocator<AllocT>(hipc::MemoryBackendId::Get(0), alloc_id, 0);\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"This function creates the shared memory segment. It first creates a 100MB\nshared-memory backend and then attaches an allocator to that backend."}),"\n",(0,o.jsx)(t.h2,{id:"connect-to-shared-memory",children:"Connect to shared memory"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'void PretestRankN() {\n  std::string shm_url = "test_allocators";\n  AllocatorId alloc_id(1, 0);\n  auto mem_mngr = HSHM_MEMORY_MANAGER;\n  mem_mngr->AttachBackend(MemoryBackendType::kPosixShmMmap, shm_url);\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["This function will attach to the allocator. AttachBackend will read the\nheader of the backend to see which allocator is on it. It will then\nautomatically register that allocator in the ",(0,o.jsx)(t.code,{children:"HSHM_MEMORY_MANAGER"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);