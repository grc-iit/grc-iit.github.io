"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[45145],{7296:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"hpc-tutorials/cpp-introduction/cpp-mixins","title":"Mixins","description":"Mixins are a design pattern which combines the functionality of multiple classes into a single class. No two mixins can have a method or variable by the same name. Mixins are the best way to handle multiple inheritance as they avoid conflicts in namespaces.","source":"@site/docs/02-hpc-tutorials/04-cpp-introduction/11-cpp-mixins.mdx","sourceDirName":"02-hpc-tutorials/04-cpp-introduction","slug":"/hpc-tutorials/cpp-introduction/cpp-mixins","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-mixins","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Factory Design Pattern","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-factory"},"next":{"title":"Unit Testing in C++","permalink":"/docs/hpc-tutorials/cpp-introduction/unit-tests"}}');var s=n(74848),a=n(28453);const c={},r="Mixins",o={},l=[];function p(e){const i={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"mixins",children:"Mixins"})}),"\n",(0,s.jsx)(i.p,{children:"Mixins are a design pattern which combines the functionality of multiple classes into a single class. No two mixins can have a method or variable by the same name. Mixins are the best way to handle multiple inheritance as they avoid conflicts in namespaces."}),"\n",(0,s.jsx)(i.p,{children:"An example of mixins which can come up are for making objects printable and\nserializeable."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-cpp",children:"class PrintableMixin {\n public:\n  virtual void Print() = 0;\n};\n\nclass SerializeableMixin {\n public:\n  virtual void Serialize() = 0;\n};\n\nclass Matrix : public PrintableMixin, public SerializeableMixin {\n public:\n  void Print() override {}\n  void Serialize() override {}\n};\n"})})]})}function u(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>r});var t=n(96540);const s={},a=t.createContext(s);function c(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);