"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[2990],{32582:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"hpc-tutorials/cpp-introduction/cpp-style-and-doc","title":"C++ Style and Documentation","description":"This section introduces a style guide for consistently phrasing and documenting","source":"@site/docs/02-hpc-tutorials/04-cpp-introduction/05-cpp-style-and-doc.md","sourceDirName":"02-hpc-tutorials/04-cpp-introduction","slug":"/hpc-tutorials/cpp-introduction/cpp-style-and-doc","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-style-and-doc","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C++ Basic Syntax","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-basic-syntax"},"next":{"title":"C++ Classes","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-classes"}}');var t=s(74848),i=s(28453);const c={},l="C++ Style and Documentation",o={},r=[{value:"General Style Rules",id:"general-style-rules",level:2},{value:"Function Names",id:"function-names",level:3},{value:"Function Variable Names",id:"function-variable-names",level:3},{value:"Class Names",id:"class-names",level:3},{value:"Method Names",id:"method-names",level:3},{value:"Class Variable Names",id:"class-variable-names",level:3},{value:"Namespaces",id:"namespaces",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Macros",id:"macros",level:3},{value:"Conditionals &amp; Loops",id:"conditionals--loops",level:3},{value:"Binary Operators",id:"binary-operators",level:3},{value:"Linting",id:"linting",level:2},{value:"Documentation",id:"documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"c-style-and-documentation",children:"C++ Style and Documentation"})}),"\n",(0,t.jsxs)(n.p,{children:["This section introduces a ",(0,t.jsx)(n.strong,{children:"style guide"})," for consistently phrasing and documenting\nC++ code. Consistency is key to making a codebase readable. You don't want the\ncode to look like it was written by a 100 different people."]}),"\n",(0,t.jsx)(n.p,{children:"If you don't know any C++, you shouldn't read this section very carefully yet.\nWe use this style in our C++ code examples. However, be aware that part of\nprofessionally developing code is being consistent."}),"\n",(0,t.jsxs)(n.p,{children:["We use the ",(0,t.jsx)(n.a,{href:"https://google.github.io/styleguide/cppguide.html",children:"Google C++ Style\nGuide"}),". We won't repeat every\nsingle rule, but we'll give you the highlights to get started. Make sure to read\nthrough their style document thoroughly."]}),"\n",(0,t.jsx)(n.h2,{id:"general-style-rules",children:"General Style Rules"}),"\n",(0,t.jsx)(n.h3,{id:"function-names",children:"Function Names"}),"\n",(0,t.jsx)(n.p,{children:"Function names should be camel case."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void MyFunction() {\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"function-variable-names",children:"Function Variable Names"}),"\n",(0,t.jsx)(n.p,{children:"Function variable names should be snake case:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void MyFunction() {\n  int my_var;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"class-names",children:"Class Names"}),"\n",(0,t.jsx)(n.p,{children:"Class names should be camel case."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Hello;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"method-names",children:"Method Names"}),"\n",(0,t.jsx)(n.p,{children:"Method names should be camel case"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Hello {\n public:\n  void MyFunction() {\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"class-variable-names",children:"Class Variable Names"}),"\n",(0,t.jsx)(n.p,{children:'Class variable names should be snake case and be appended with a trailing "_".\nThe underscore makes it so that we know this is a variable of the class, and not\njust a typical variable stored on the stack.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Hello {\n  int my_var_;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"namespaces",children:"Namespaces"}),"\n",(0,t.jsx)(n.p,{children:"Generally, classes should be encapsulated in a namespace. This avoids\naccidental conflicts across packages."}),"\n",(0,t.jsx)(n.p,{children:"Namespaces are snake case. Namespaces must also be terminated using\na comment which states the name of the namespace."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"namespace my_namespace {\n\n}  // namespace my_namespace\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enumerations",children:"Enumerations"}),"\n",(0,t.jsx)(n.p,{children:"Enumerations should be camel case. Enumeration entries should begin with\na lowercase k."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"enum class MyFruitEnum {\n  kApple,\n  kOrange\n  kDragonFruit\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"macros",children:"Macros"}),"\n",(0,t.jsx)(n.p,{children:"Macros should be snake case and all caps. Macros should be used sparingly\nsince they are much harder to debug. The most common use of macros is\nfor defining constants."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#define MY_MACRO 25\n"})}),"\n",(0,t.jsx)(n.p,{children:"Macro function parameters should be snake case and all caps as well."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#define MY_MACRO(A, B)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"conditionals--loops",children:"Conditionals & Loops"}),"\n",(0,t.jsx)(n.p,{children:"Whenever making a conditional, ensure there is a single space between the keyword and the parenthesis."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'// This is BAD\nif(true) {\n  std::cout << "hello" << std::endl;\n}\n\n// This is GOOD\nif (true) {\n  std::cout << "hello1" << std::endl;\n} else if (false) {\n  std::cout << "hello2" << std::endl;\n} else {\n  std::cout << "hello3" << std::endl;\n}\n\n// This is GOOD\nwhile (true) {\n  std::cout << "hello" << std::endl;\n}\n\n// This is GOOD\ndo {\n\n} while (true);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"binary-operators",children:"Binary Operators"}),"\n",(0,t.jsx)(n.p,{children:"Binary operators such as =, +, -, *, /, etc. should have a space on both the left and right side."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// GOOD\nint c = a + b\n\n// BAD\nint c=a+b;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"linting",children:"Linting"}),"\n",(0,t.jsxs)(n.p,{children:["To ensure that your code is consistent, you can use ",(0,t.jsx)(n.a,{href:"https://google.github.io/styleguide/cppguide.html#cpplint",children:"cpplint.py"}),".\nCpplint is a python script which can inspect codebases for stylistic errors.\nIt can be installed as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 -m pip install cpplint\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// Copyright [year] <Copyright Owner>\n\n#ifndef MY_HEADER_GUARD\n#define MY_HEADER_GUARD\n\nnamespace myNamespace {\n\nclass MyName {\n  int my_var_;\n\n  void MyFunc() {\n    int hi;\n  }\n};\n\n}\n\n#endif\n"})}),"\n",(0,t.jsx)(n.p,{children:"This violates the rule that the namespace is missing the namespace comment.\ncpplint can be executed as follows to detect this error:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\ncpplint --recursive src/cpplint_test.h\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'src/cpplint_test.h:16:  Namespace should be terminated with "// namespace myNamespace"  [readability/namespace] [5]\nDone processing src/cpplint_test.h\nTotal errors found: 1\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can tune the set of errors cpplint checks for by creating a CPPLINT.cfg\nfile."}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.p,{children:"Code documentation is important to improve the readability of code and to\ngive some guidance on how to interpret the codebase. AI models, for example,\ncan crawl well-documented codebases to help provide examples."}),"\n",(0,t.jsx)(n.p,{children:"The most used documentation format is called Doxygen."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var a=s(96540);const t={},i=a.createContext(t);function c(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);