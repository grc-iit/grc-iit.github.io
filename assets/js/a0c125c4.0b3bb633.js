"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[28270],{90789:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"iowarp/components/runtime/code-example","title":"Client API Example","description":"Below is an example of how someone would use an existing module in their code.","source":"@site/docs/11-iowarp/03-components/03-runtime/02-code-example.md","sourceDirName":"11-iowarp/03-components/03-runtime","slug":"/iowarp/components/runtime/code-example","permalink":"/docs/iowarp/components/runtime/code-example","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"The IOWarp Runtime: Chimaera","permalink":"/docs/iowarp/components/runtime/index"},"next":{"title":"Launch Runtime","permalink":"/docs/iowarp/components/runtime/launch-runtime"}}');var a=i(74848),t=i(28453);const l={},o="Client API Example",c={},r=[{value:"Headers and Macros",id:"headers-and-macros",level:2},{value:"Initializing Connection",id:"initializing-connection",level:2},{value:"RegisterModule",id:"registermodule",level:2},{value:"Create the Small Message ChiPool",id:"create-the-small-message-chipool",level:2},{value:"Send the Metadata Task",id:"send-the-metadata-task",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"client-api-example",children:"Client API Example"})}),"\n",(0,a.jsxs)(n.p,{children:["Below is an example of how someone would use an existing module in their code.\nIn this case, the module is named ",(0,a.jsx)(n.code,{children:"small_message"})," and exposes an api named ",(0,a.jsx)(n.code,{children:"Md"}),".\nThe small_message ChiPool, when created, stores an integer (by default) in each ChiContainer.\n",(0,a.jsx)(n.code,{children:"Md"})," reads that integer and returns it to the user."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'#include "chimaera/api/chimaera_client.h"\n#include "chimaera_admin/chimaera_admin_client.h"\n#include "small_message/small_message_client.h"\n\nCHI_NAMESPACE_INIT\n\nint main() {\n  CHIMAERA_CLIENT_INIT();\n\n  int rank, nprocs;\n  MPI_Barrier(MPI_COMM_WORLD);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &nprocs);\n  CHI_ADMIN->RegisterModule(HSHM_DEFAULT_MEM_CTX,\n                            chi::DomainQuery::GetGlobalBcast(),\n                            "small_message");\n  chi::small_message::Client client;\n  client.Create(\n      HSHM_DEFAULT_MEM_CTX,\n      chi::DomainQuery::GetDirectHash(chi::SubDomainId::kGlobalContainers, 0),\n      chi::DomainQuery::GetGlobalBcast(), "ipc_test");\n  hshm::Timer t;\n  size_t ops = 256;\n  HILOG(kInfo, "OPS: {}", ops);\n  t.Resume();\n  int depth = 0;\n  for (size_t i = 0; i < ops; ++i) {\n    int cont_id = i;\n    int ret = client.Md(HSHM_DEFAULT_MEM_CTX,\n                        chi::DomainQuery::GetDirectHash(\n                            chi::SubDomainId::kGlobalContainers, cont_id),\n                        depth, 0);\n    REQUIRE(ret == 1);\n  }\n  t.Pause();\n\n  HILOG(kInfo, "Latency: {} MOps, {} MTasks", ops / t.GetUsec(),\n        ops * (depth + 1) / t.GetUsec());\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"headers-and-macros",children:"Headers and Macros"}),"\n",(0,a.jsx)(n.p,{children:"The first few lines relate to the includes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'#include "chimaera/api/chimaera_client.h"\n#include "chimaera_admin/chimaera_admin_client.h"\n#include "small_message/small_message_client.h"\n\nCHI_NAMESPACE_INIT\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chimaera/api/chimaera_client.h"})," includes all code for\nconnecting to the runtime"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chimaera_admin/chimaera_admin.h"})," includes all APIs for\nregistering modules to the runtime"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"small_message/small_message.h"})," is the small_message module"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CHI_NAMESPACE_INIT"}),' is a macro that makes various typedefs\nto avoid having the same "using chi::*" preambles everywhere']}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"initializing-connection",children:"Initializing Connection"}),"\n",(0,a.jsx)(n.p,{children:"To initialize the connection to the client, the main function first calls:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"CHIMAERA_CLIENT_INIT();\n"})}),"\n",(0,a.jsx)(n.p,{children:"This function will connect to a shared-memory segment between this process\nand the runtime to allow tasks to be scheduled."}),"\n",(0,a.jsx)(n.h2,{id:"registermodule",children:"RegisterModule"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'CHI_ADMIN->RegisterModule(HSHM_DEFAULT_MEM_CTX,\n                          chi::DomainQuery::GetGlobalBcast(),\n                          "small_message");\n'})}),"\n",(0,a.jsx)(n.p,{children:'This line of code will register the "small_message" module on\nevery node. Registering a module means searching for the\nshared object named "small_message".'}),"\n",(0,a.jsx)(n.p,{children:'Before the runtime is spawned, the "small_message" object needs\nto be in the runtime\'s search path. This could be in the variables\nPATH or LD_LIBRARY_PATH.'}),"\n",(0,a.jsx)(n.h2,{id:"create-the-small-message-chipool",children:"Create the Small Message ChiPool"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'chi::small_message::Client client;\nclient.Create(\n    HSHM_DEFAULT_MEM_CTX,\n    chi::DomainQuery::GetDirectHash(chi::SubDomainId::kGlobalContainers, 0),\n    chi::DomainQuery::GetGlobalBcast(), "ipc_test");\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Create"})," will create a ChiPool. This pool will span all nodes\n(",(0,a.jsx)(n.code,{children:"chi::DomainQuery::GetGlobalBcast()"}),") and will\nbe registered first by Chimaera Admin's first container\n(",(0,a.jsx)(n.code,{children:"chi::DomainQuery::GetDirectHash(chi::SubDomainId::kGlobalContainers, 0)"}),").\nBy default, there will be one container per node in the provided domain.\nIn this case, the set of all nodes."]}),"\n",(0,a.jsx)(n.h2,{id:"send-the-metadata-task",children:"Send the Metadata Task"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'  hshm::Timer t;\n  size_t ops = 256;\n  HILOG(kInfo, "OPS: {}", ops);\n  t.Resume();\n  int depth = 0;\n  for (size_t i = 0; i < ops; ++i) {\n    int cont_id = i;\n    int ret = client.Md(HSHM_DEFAULT_MEM_CTX,\n                        chi::DomainQuery::GetDirectHash(\n                            chi::SubDomainId::kGlobalContainers, cont_id),\n                        depth, 0);\n    REQUIRE(ret == 1);\n  }\n  t.Pause();\n\n  HILOG(kInfo, "Latency: {} MOps, {} MTasks", ops / t.GetUsec(),\n        ops * (depth + 1) / t.GetUsec());\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In a loop, ",(0,a.jsx)(n.code,{children:"client.Md"})," will construct an MdTask object and schedule\nto the container ",(0,a.jsx)(n.code,{children:"cont_id"})," in the Small Message ChiPool. At the\nend, the overall performance is reported."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const a={},t=s.createContext(a);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);