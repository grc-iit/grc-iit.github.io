"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[64204],{21009:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"iowarp/components/runtime/deploying-mods","title":"Deploying Modules","description":"In order to test your module, you should learn Jarvis, which","source":"@site/docs/11-iowarp/03-components/03-runtime/05-deploying-mods.md","sourceDirName":"11-iowarp/03-components/03-runtime","slug":"/iowarp/components/runtime/deploying-mods","permalink":"/docs/iowarp/components/runtime/deploying-mods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building Modules","permalink":"/docs/iowarp/components/runtime/modules"},"next":{"title":"Domains","permalink":"/docs/iowarp/components/runtime/domains"}}');var i=s(74848),t=s(28453);const a={},o="Deploying Modules",l={},c=[{value:"The Current Example",id:"the-current-example",level:2},{value:"Create a simple unit test",id:"create-a-simple-unit-test",level:2},{value:"Add the tester CMake",id:"add-the-tester-cmake",level:2},{value:"Connect the tester CMake to the overall module",id:"connect-the-tester-cmake-to-the-overall-module",level:2},{value:"Build and Install",id:"build-and-install",level:2},{value:"Create a Jarvis Repo",id:"create-a-jarvis-repo",level:2},{value:"Create a Jarvis Pkg",id:"create-a-jarvis-pkg",level:2},{value:"Build the Jarvis Pkg",id:"build-the-jarvis-pkg",level:2},{value:"Edit configure menu",id:"edit-configure-menu",level:3},{value:"Edit the start function",id:"edit-the-start-function",level:2},{value:"More documentation on Jarvis PKGs",id:"more-documentation-on-jarvis-pkgs",level:2},{value:"Build a Pipeline Script",id:"build-a-pipeline-script",level:2},{value:"Build pipeline environment",id:"build-pipeline-environment",level:2},{value:"Load + Run the Pipeline",id:"load--run-the-pipeline",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deploying-modules",children:"Deploying Modules"})}),"\n",(0,i.jsxs)(n.p,{children:["In order to test your module, you should learn ",(0,i.jsx)(n.a,{href:"/docs/jarvis/jarvis-cd/index",children:"Jarvis"}),", which\nis the tool that is used to deploy the iowarp runtime."]}),"\n",(0,i.jsx)(n.p,{children:'In the previous section, we built a module repo named "my_mod_repo" with the\nnamespace "example" and a module named "compressor" in that repo. This section will give detail\non how to build a jarvis package to test the compressor module.'}),"\n",(0,i.jsx)(n.h2,{id:"the-current-example",children:"The Current Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"my_mod_repo\n\u251c\u2500\u2500 chimaera_repo.yaml  # Repo metadata\n\u251c\u2500\u2500 CMakeLists.txt      # Repo cmake\n\u2514\u2500\u2500 compressor\n    \u251c\u2500\u2500 chimaera_mod.yaml  # Module metadata\n    \u251c\u2500\u2500 CMakeLists.txt     # Module cmake\n    \u251c\u2500\u2500 include\n    \u2502\xa0\xa0 \u2514\u2500\u2500 compressor\n    \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_client.h      # Client API\n    \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_lib_exec.h    # (autogenerated from *methods.yaml)\n    \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_methods.h     # (autogenerated from *methods.yaml)\n    \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_methods.yaml  # Task declarations \n    \u2502\xa0\xa0     \u2514\u2500\u2500 compressor_tasks.h       # Task struct definitions \n    \u2514\u2500\u2500 src\n        \u251c\u2500\u2500 CMakeLists.txt          # Builds compressor_client and runtime  \n        \u251c\u2500\u2500 compressor_client.cc    # Client API source\n        \u251c\u2500\u2500 compressor_monitor.py   # Used for monitoring\n        \u2514\u2500\u2500 compressor_runtime.cc   # Runtime API source\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-simple-unit-test",children:"Create a simple unit test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir ~/my_mod_repo/compressor/test\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Edit the file ",(0,i.jsx)(n.code,{children:"~/my_mod_repo/compressor/test/test.cc"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include "compressor/compressor_client.h"\n\nint main() {\n  CHIMAERA_CLIENT_INIT();\n  chi::compressor::Client client;\n  client.Create(\n      HSHM_MCTX,\n      chi::DomainQuery::GetDirectHash(chi::SubDomainId::kGlobalContainers, 0),\n      chi::DomainQuery::GetGlobalBcast(), "ipc_test");\n\n  size_t data_size = hshm::Unit<size_t>::Megabytes(1);\n  hipc::FullPtr<char> orig_data =\n      CHI_CLIENT->AllocateBuffer(HSHM_MCTX, data_size);\n  client.Compress(HSHM_MCTX, chi::DomainQuery::GetLocalHash(0), orig_data.shm_,\n                  data_size);\n  return 0;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"add-the-tester-cmake",children:"Add the tester CMake"}),"\n",(0,i.jsxs)(n.p,{children:["Edit the file ",(0,i.jsx)(n.code,{children:"~/my_mod_repo/compressor/test/CMakeLists.txt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cmake",children:"add_executable(compress_test test.cc)\ntarget_link_libraries(compress_test example::compressor_client)\n\ninstall(\n  TARGETS\n  compress_test\n  EXPORT\n  ${CHIMAERA_EXPORTED_TARGETS}\n  LIBRARY DESTINATION ${CHIMAERA_INSTALL_LIB_DIR}\n  ARCHIVE DESTINATION ${CHIMAERA_INSTALL_LIB_DIR}\n  RUNTIME DESTINATION ${CHIMAERA_INSTALL_BIN_DIR}\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will create an executable named ",(0,i.jsx)(n.code,{children:"compress_test"})," when ",(0,i.jsx)(n.code,{children:"make"})," is executed."]}),"\n",(0,i.jsx)(n.h2,{id:"connect-the-tester-cmake-to-the-overall-module",children:"Connect the tester CMake to the overall module"}),"\n",(0,i.jsxs)(n.p,{children:["And then edit compressor's root cmake ",(0,i.jsx)(n.code,{children:"~/my_mod_repo/compressor/CMakeLists.txt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cmake",children:"# ------------------------------------------------------------------------------\n# Build compressor module\n# ------------------------------------------------------------------------------\ninclude_directories(include)\nadd_subdirectory(src)\nadd_subdirectory(test)  # ADD ME\n\n# -----------------------------------------------------------------------------\n# Install compressor headers\n# -----------------------------------------------------------------------------\ninstall(DIRECTORY include DESTINATION ${CMAKE_INSTALL_PREFIX})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"build-and-install",children:"Build and Install"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"scspkg create compressor\ncd ~/my_mod_repo\nmkdir build\ncd build\ncmake .. -DCMAKE_INSTALL_PREFIX=$(scspkg pkg root compressor)\nmake -j32 install\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-jarvis-repo",children:"Create a Jarvis Repo"}),"\n",(0,i.jsxs)(n.p,{children:["The following will create a repo named ",(0,i.jsx)(n.code,{children:"jarvis_example"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/my_mod_repo/jarvis_example/jarvis_example\nmkdir -p ~/my_mod_repo/jarvis_example/pipelines\njarvis repo add ~/my_mod_repo/jarvis_example\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-jarvis-pkg",children:"Create a Jarvis Pkg"}),"\n",(0,i.jsx)(n.p,{children:"The following will bootstrap a compressor package in the\nmost recently added repo (jarvis_example)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"jarvis repo create compressor app\n"})}),"\n",(0,i.jsx)(n.p,{children:"You will then have the following structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 chimaera_repo.yaml\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 compressor\n\u2502\xa0\xa0 \u251c\u2500\u2500 chimaera_mod.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 include\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 compressor\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_client.h\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_client.temp_h\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_lib_exec.h\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_methods.compiled.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_methods.h\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_methods.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 compressor_tasks.h\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 compressor_tasks.temp_h\n\u2502\xa0\xa0 \u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CMakeLists.txt.backup\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 compressor_client.cc\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 compressor_monitor.py\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 compressor_runtime.cc\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 compressor_runtime.temp_cc\n\u2502\xa0\xa0 \u2514\u2500\u2500 test\n\u2502\xa0\xa0     \u251c\u2500\u2500 CMakeLists.txt\n\u2502\xa0\xa0     \u2514\u2500\u2500 test.cc\n\u2514\u2500\u2500 jarvis_example\n    \u251c\u2500\u2500 jarvis_example\n    \u2502\xa0\xa0 \u2514\u2500\u2500 compressor\n    \u2502\xa0\xa0     \u2514\u2500\u2500 pkg.py\n    \u2514\u2500\u2500 pipelines\n"})}),"\n",(0,i.jsx)(n.h2,{id:"build-the-jarvis-pkg",children:"Build the Jarvis Pkg"}),"\n",(0,i.jsxs)(n.p,{children:["Begin editing ",(0,i.jsx)(n.code,{children:"~/my_mod_repo/jarvis_example/jarvis_example/compressor/pkg.py"})]}),"\n",(0,i.jsx)(n.p,{children:"The unedited code looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""\nThis module provides classes and methods to launch the Compressor application.\nCompressor is ....\n"""\nfrom jarvis_cd.basic.pkg import Application\nfrom jarvis_util import *\n\n\nclass Compressor(Application):\n    """\n    This class provides methods to launch the Compressor application.\n    """\n    def _init(self):\n        """\n        Initialize paths\n        """\n        pass\n\n    def _configure_menu(self):\n        """\n        Create a CLI menu for the configurator method.\n        For thorough documentation of these parameters, view:\n        https://github.com/scs-lab/jarvis-util/wiki/3.-Argument-Parsing\n\n        :return: List(dict)\n        """\n        return [\n            {\n                \'name\': None,  # The name of the parameter\n                \'msg\': \'\',  # Describe this parameter\n                \'type\': str,  # What is the parameter type?\n                \'default\': None,  # What is the default value if not required?\n                # Does this parameter have specific valid inputs?\n                \'choices\': [],\n                # When type is list, what do the entries of the list mean?\n                # A list of dicts just like this one.\n                \'args\': [],\n            },\n        ]\n\n    def _configure(self, **kwargs):\n        """\n        Converts the Jarvis configuration to application-specific configuration.\n        E.g., OrangeFS produces an orangefs.xml file.\n\n        :param kwargs: Configuration parameters for this pkg.\n        :return: None\n        """\n        pass\n\n    def start(self):\n        """\n        Launch an application. E.g., OrangeFS will launch the servers, clients,\n        and metadata services on all necessary pkgs.\n\n        :return: None\n        """\n        pass\n\n    def stop(self):\n        """\n        Stop a running application. E.g., OrangeFS will terminate the servers,\n        clients, and metadata services.\n\n        :return: None\n        """\n        pass\n\n    def kill(self):\n        """\n        Forcibly a running application. E.g., OrangeFS will terminate the servers,\n        clients, and metadata services.\n\n        :return: None\n        """\n        pass\n\n    def clean(self):\n        """\n        Destroy all data for an application. E.g., OrangeFS will delete all\n        metadata and data directories in addition to the orangefs.xml file.\n\n        :return: None\n        """\n        pass\n'})}),"\n",(0,i.jsx)(n.h3,{id:"edit-configure-menu",children:"Edit configure menu"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def _configure_menu(self):\n        """\n        Create a CLI menu for the configurator method.\n        For thorough documentation of these parameters, view:\n        https://github.com/scs-lab/jarvis-util/wiki/3.-Argument-Parsing\n\n        :return: List(dict)\n        """\n        return []\n'})}),"\n",(0,i.jsx)(n.p,{children:"Our package will take no arguments."}),"\n",(0,i.jsx)(n.h2,{id:"edit-the-start-function",children:"Edit the start function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    def start(self):\n        """\n        Launch an application. E.g., OrangeFS will launch the servers, clients,\n        and metadata services on all necessary pkgs.\n\n        :return: None\n        """\n        Exec(\'compress_test\',\n             LocalExecInfo(env=self.env))\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Exec"})," will run the command ",(0,i.jsx)(n.code,{children:"compress_test"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LocalExecInfo"})," indicates that this will be executed on this machine."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"env=self.env"})," ensures that the pipeline's environment is used for this command.\nThe environment is stored in a YAML file in the pipeline's config directory and is\nbuilt using commands like ",(0,i.jsx)(n.code,{children:"jarvis ppl env build"})," and ",(0,i.jsx)(n.code,{children:"jarvis ppl env copy"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"more-documentation-on-jarvis-pkgs",children:"More documentation on Jarvis PKGs"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/jarvis/jarvis-cd/building-package",children:"This guide"})," goes over\nin more detail each jarvis pkg method."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/jarvis/jarvis-util/program-execution",children:"This guide"})," goes over\nmore ways to execute distributed programs with tools like PSSH and MPI."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/jarvis/jarvis-util/argument-parsing",children:"This guide"})," goes over\nmore about the argument parser."]}),"\n",(0,i.jsx)(n.h2,{id:"build-a-pipeline-script",children:"Build a Pipeline Script"}),"\n",(0,i.jsx)(n.p,{children:"Next we must build a pipeline for the tool. Below is an\nexample pipeline script that you should place in"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"~/my_mod_repo/compressor/jarvis_example/pipelines/test.yaml"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: test_pipeline\nenv: chimaera\npkgs:\n  - pkg_type: chimaera_run\n    pkg_name: chimaera_run\n    sleep: 5\n    do_dbg: false\n    dbg_port: 4000\n    port: 6000\n    modules: ['example_compressor']\n  - pkg_type: compressor\n    pkg_name: compressor\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The directory ",(0,i.jsx)(n.code,{children:"~/my_mod_repo/compressor/jarvis_example/pipelines"})," is known\nas a pipeline index. It is simply a place where jarvis knows pipelines are\nlocated. This means you don't have to remember the full path to the script."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"env: chimaera"}),": This will copy the named environment named ",(0,i.jsx)(n.code,{children:"chimaera"}),". We will\ncreate this environment in the next section."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"modules"}),": The modules that the iowarp runtime (Chimaera) searches for at launch.\nBy using ",(0,i.jsx)(n.code,{children:"example_compressor"})," here, the runtime will search for various shared objects, such as\n",(0,i.jsx)(n.code,{children:"libexample_compressor.so"})," in ",(0,i.jsx)(n.code,{children:"LD_LIBRARY_PATH"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pkg_type: compressor"}),": This corresponds to the ",(0,i.jsx)(n.code,{children:"jarvis repo create compressor"})," command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pkg_name: compressor"}),": This can be whatever string you want. However, I typically just keep\nit the same as ",(0,i.jsx)(n.code,{children:"pkg_type"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"build-pipeline-environment",children:"Build pipeline environment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"spack load iowarp\nmodule load compressor\njarvis env build chimaera\n"})}),"\n",(0,i.jsx)(n.h2,{id:"load--run-the-pipeline",children:"Load + Run the Pipeline"}),"\n",(0,i.jsx)(n.p,{children:"Here is how we would run the pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"jarvis ppl index copy jarvis_example.test\njarvis ppl load yaml test.yaml\njarvis ppl run\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);