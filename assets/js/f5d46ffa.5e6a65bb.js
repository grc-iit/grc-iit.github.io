"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[1249],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),h=i,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||r;return t?a.createElement(d,l(l({ref:n},c),{},{components:t})):a.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={},l="Basics of using a Terminal",o={unversionedId:"hpc-tutorials/linux-introduction/using-a-terminal",id:"hpc-tutorials/linux-introduction/using-a-terminal",title:"Basics of using a Terminal",description:"In this section, we will use Ubuntu 22.04 as our Linux distro. First, we will discuss the basic aspects of using a Linux terminal.",source:"@site/docs/02-hpc-tutorials/01-linux-introduction/02-using-a-terminal.md",sourceDirName:"02-hpc-tutorials/01-linux-introduction",slug:"/hpc-tutorials/linux-introduction/using-a-terminal",permalink:"/docs/hpc-tutorials/linux-introduction/using-a-terminal",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Choosing an OS",permalink:"/docs/hpc-tutorials/linux-introduction/choosing-an-os"},next:{title:"SSH",permalink:"/docs/hpc-tutorials/linux-introduction/ssh"}},s={},p=[{value:"Interacting with the Filesystem",id:"interacting-with-the-filesystem",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Printing Environment Variables",id:"printing-environment-variables",level:3},{value:"Environment Variable Scope",id:"environment-variable-scope",level:3},{value:"Limited Scope",id:"limited-scope",level:3},{value:"Pass Environment Variables",id:"pass-environment-variables",level:3},{value:"Export Environment Variables",id:"export-environment-variables",level:3},{value:"Removing Environment Variables",id:"removing-environment-variables",level:3},{value:"Common Environment Variables",id:"common-environment-variables",level:3},{value:"Bashrc: Saving Environment Variables",id:"bashrc-saving-environment-variables",level:3},{value:"Simple text editing",id:"simple-text-editing",level:2},{value:"Nano",id:"nano",level:3},{value:"Vim",id:"vim",level:3}],c={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basics-of-using-a-terminal"},"Basics of using a Terminal"),(0,i.kt)("p",null,"In this section, we will use Ubuntu 22.04 as our Linux distro. First, we will discuss the basic aspects of using a Linux terminal."),(0,i.kt)("p",null,"A terminal provides a way of interacting with the OS using a command prompt. Users enter commands into the terminal based on memory\ninstead of using a graphical user interface (GUI). This can be faster since it avoids clicking and memorizing menus. However, it is\nalso necessary since many HPC machines are remote and do not support fancy GUIs. There are many commands Linux users should be\nfamiliar with in general."),(0,i.kt)("h2",{id:"interacting-with-the-filesystem"},"Interacting with the Filesystem"),(0,i.kt)("p",null,"Examples of the basic filesystem operations are as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Change directory to your home directory\n# ~/ is shorthand for home directory\n# ~ is a special character used by the terminal\ncd ~/\n\n# Create a directory\nmkdir hello\n\n# Create directories + subdirectories\nmkdir -p hello/hi/hi2\n\n# Change into the "hello" directory\n# cd: "change directory"\ncd hello\n\n# Create 4 empty files\ntouch hi.txt\ntouch hi2.txt\ntouch hi3.txt hi4.txt\n\n# List the hello directory (view its contents)\nls hello\n\n# Change into the "hi2" directory\n# NOTE: ./ is optional\n# cd hi/hi2 would do the same thing\ncd ./hi/hi2\n\n# Go to the parent directory (hi)\ncd ..\n# Go to hello\'s parent\ncd ../../\n\n# Remove 3 of the files\n# NOTE: rm is permanent, data recovery is not really possible\nrm hello/hi.txt\nrm hello/hi2.txt hello/hi3.txt\n\n# Remove directories and subdirectories\n# "r" means to "recursively" delete all data in the directory\n# "f" means "force" delete the directory without asking for confirmation\nrm -rf hello\n\n# Append a string to a file\n# >> is the append operator\n# hello.txt contains 2525\necho "25" >> hello.txt\necho "25" >> hello.txt\n\n# Create a new file with string as its data\n# > truncates a file and replaces its text with the echo\'d string\n# hello.txt contains 30\necho "30" > hello.txt\n')),(0,i.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,i.kt)("p",null,"Environment variables are used to store some sort of information without having to hard-code it each time.\nMany programs rely on environment variables as a way of passing information to the program."),(0,i.kt)("h3",{id:"printing-environment-variables"},"Printing Environment Variables"),(0,i.kt)("p",null,"To set an environment variable and print it, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"MY_VAR=25\necho ${MY_VAR}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"25\n")),(0,i.kt)("h3",{id:"environment-variable-scope"},"Environment Variable Scope"),(0,i.kt)("p",null,"Scope refers to the visibility of a variable. For example, can a program read the environment variable after it has been set?"),(0,i.kt)("p",null,"Let's say we have the following bash script named ",(0,i.kt)("inlineCode",{parentName:"p"},"printenv.sh"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\necho ${MY_VAR}\n")),(0,i.kt)("p",null,"To use this bash script, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ${SCS_TUTORIAL}/1.1.linux_intro\n")),(0,i.kt)("h3",{id:"limited-scope"},"Limited Scope"),(0,i.kt)("p",null,"Run the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"MY_VAR=25\nbash printenv.sh\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"")),(0,i.kt)("p",null,"The output is empty. This is because the scope of ",(0,i.kt)("inlineCode",{parentName:"p"},"MY_VAR")," is limited to the current shell. When launching ",(0,i.kt)("inlineCode",{parentName:"p"},"printenv.sh"),",\na new shell is created and the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"MY_VAR")," is not passed to it."),(0,i.kt)("h3",{id:"pass-environment-variables"},"Pass Environment Variables"),(0,i.kt)("p",null,"To pass environment variables to programs, run the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"MY_VAR=25\nMY_VAR=20 bash printenv.sh\necho ${MY_VAR}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"20\n25\n")),(0,i.kt)("p",null,"In this example, ",(0,i.kt)("inlineCode",{parentName:"p"},"MY_VAR=20")," is passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"printenv.sh"),", which then prints ",(0,i.kt)("inlineCode",{parentName:"p"},"20"),". However, ",(0,i.kt)("inlineCode",{parentName:"p"},"MY_VAR=20")," does not change the\nvalue of ",(0,i.kt)("inlineCode",{parentName:"p"},"MY_VAR")," in the parent shell. Running ",(0,i.kt)("inlineCode",{parentName:"p"},"echo ${MY_VAR}")," prints ",(0,i.kt)("inlineCode",{parentName:"p"},"25"),", which was the original value."),(0,i.kt)("h3",{id:"export-environment-variables"},"Export Environment Variables"),(0,i.kt)("p",null,"Exporting an environment variables modifies the value of the variable in the current shell and passes the variable to\nprograms executed in the shell."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export MY_VAR=20\nbash printenv.sh\necho ${MY_VAR}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"20\n")),(0,i.kt)("h3",{id:"removing-environment-variables"},"Removing Environment Variables"),(0,i.kt)("p",null,"To remove an environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"unset MY_VAR\nbash printenv.sh\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"")),(0,i.kt)("h3",{id:"common-environment-variables"},"Common Environment Variables"),(0,i.kt)("p",null,"Below we describe some environment variables that come automatically when you open a terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# HOME represents your home directory\necho "HOME=${HOME}"\ncd ${HOME}\n# PWD stands for print working directory\n# Output will be equivalent to ${HOME} in this case\necho "PWD=${PWD}"\n# USER represents your username\necho "USER=${USER}"\n')),(0,i.kt)("p",null,"This list is not comprehensive, and there are many more variables that are important -- but they will\nbe discussed later."),(0,i.kt)("h3",{id:"bashrc-saving-environment-variables"},"Bashrc: Saving Environment Variables"),(0,i.kt)("p",null,"In your home directory, there is a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bashrc"),". This file is executed every time you open a shell.\nThis file can be used for storing environment variables."),(0,i.kt)("p",null,"Bashrc contains a bunch of code. This code is used to initialize the state of a shell. Typically it's best to\nplace environment variables at the bottom of the bashrc file. This can be done as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "export MY_VAR=30" >> ~/.bashrc\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},'echo "MY_VAR=25"')," will print the string ",(0,i.kt)("inlineCode",{parentName:"li"},'"MY_VAR=25"'),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},">>")," will append the string ",(0,i.kt)("inlineCode",{parentName:"li"},'"MY_VAR=25"')," to ",(0,i.kt)("inlineCode",{parentName:"li"},"~/.bashrc"))),(0,i.kt)("p",null,"If you open ~/.bashrc you should see at the bottom of the file is that export statement."),(0,i.kt)("p",null,"Note, appending the export statement does NOT rerun the bashrc script. Your current shell will not be updated yet.\nTo execute the bashrc script and update the current shell, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"source ~/.bashrc\necho ${MY_VAR}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"30\n")),(0,i.kt)("h2",{id:"simple-text-editing"},"Simple text editing"),(0,i.kt)("p",null,"There are three main terminal text editors: nano, vim, and emacs. vim and emacs rely heavily on memorizing key bindings.\nFor new users, this is typically challenging. In general, we do not code using terminal text editors, we only use them to\ndo minor changes. We recommend that large changes to files be made in an IDE, office tool, or graphical text editor."),(0,i.kt)("p",null,"For this reason, we will discuss only the basics of vim and nano. We will not touch emacs, as vim and nano are almost\nalways the default text editors. Generally, we recommend nano since it's simple. Some cases, vim may be the default,\nso it will be discussed too."),(0,i.kt)("h3",{id:"nano"},"Nano"),(0,i.kt)("p",null,"To open or create a file using nano, do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nano ~/hello.txt\n")),(0,i.kt)("p",null,"The file can be edited immediately (if you have edit rights to the file)."),(0,i.kt)("p",null,"The main keybindings to be aware of are as follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'"',(0,i.kt)("kbd",null,"Ctrl")," ",(0,i.kt)("kbd",null,"s"),'" will save a file'),(0,i.kt)("li",{parentName:"ol"},'"',(0,i.kt)("kbd",null,"Ctrl")," ",(0,i.kt)("kbd",null,"x"),'" will close the file')),(0,i.kt)("p",null,"NOTE: ",(0,i.kt)("inlineCode",{parentName:"p"},"nano")," does not come by default on every single machine. You may have to install separately."),(0,i.kt)("h3",{id:"vim"},"Vim"),(0,i.kt)("p",null,"To open a file using vim, do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vi ~/hello.txt\n")),(0,i.kt)("p",null,"When the file is opened, the main keybindings to consider are is follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Initially, the file is opened in "normal mode". ',(0,i.kt)("strong",{parentName:"li"},'You must press "',(0,i.kt)("kbd",null,"i"),'" in order to switch to "edit mode"'),"."),(0,i.kt)("li",{parentName:"ol"},"When you have finished editing, press ",(0,i.kt)("kbd",null,"ESC")," on your keyboard. This will bring you back to normal mode"),(0,i.kt)("li",{parentName:"ol"},"Press ",(0,i.kt)("kbd",null,":"),' to bring you into "command mode"'),(0,i.kt)("li",{parentName:"ol"},'Then type "wq" to "write" and then "quit". Press enter, and the editor will close')),(0,i.kt)("p",null,'NOTE: if you accidentally press "',(0,i.kt)("kbd",null,"Ctrl")," ",(0,i.kt)("kbd",null,"s"),'", you will not be able to type anything (not even commands).\nTo get out of this, type "',(0,i.kt)("kbd",null,"Ctrl")," ",(0,i.kt)("kbd",null,"q"),'"'))}m.isMDXComponent=!0}}]);