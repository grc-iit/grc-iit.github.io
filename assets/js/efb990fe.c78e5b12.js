"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[7804],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=l,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var s=2;s<a;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(7462),l=(n(7294),n(3905));const a={},r="Program Execution",i={unversionedId:"jarvis/jarvis-util/program-execution",id:"jarvis/jarvis-util/program-execution",title:"Program Execution",description:"Exec is used to execute a binary program as a subprocess in Python. Exec can be used for local, remote, or parallel execution of code. Exec is currently a wrapper around the following libraries:",source:"@site/docs/05-jarvis/01-jarvis-util/02-program-execution.md",sourceDirName:"05-jarvis/01-jarvis-util",slug:"/jarvis/jarvis-util/program-execution",permalink:"/docs/jarvis/jarvis-util/program-execution",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/jarvis/jarvis-util/index"},next:{title:"Built-in Wrappers",permalink:"/docs/jarvis/jarvis-util/builtin-wrappers"}},c={},s=[{value:"<code>ExecInfo</code>",id:"execinfo",level:2},{value:"Specifying execution method (e.g., SSH vs MPI)",id:"specifying-execution-method-eg-ssh-vs-mpi",level:3},{value:"Managing output from commands",id:"managing-output-from-commands",level:3},{value:"Asynchronous execution",id:"asynchronous-execution",level:3},{value:"<code>LocalExec</code>",id:"localexec",level:2},{value:"<code>SshExec</code>",id:"sshexec",level:2},{value:"<code>PsshExec</code>",id:"psshexec",level:2},{value:"<code>MpiExec</code>",id:"mpiexec",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"program-execution"},"Program Execution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Exec")," is used to execute a binary program as a subprocess in Python. ",(0,l.kt)("inlineCode",{parentName:"p"},"Exec")," can be used for local, remote, or parallel execution of code. Exec is currently a wrapper around the following libraries:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Subprocess: executes a program locally on a machine. We use shell=True here. The intention is to be equivalent to a bash script."),(0,l.kt)("li",{parentName:"ol"},'SSH: executes a program remotely using SSH. This has only been tested on Linux. It is equivalent to executing "ssh" in the terminal.'),(0,l.kt)("li",{parentName:"ol"},"Parallel SSH (PSSH): executes a program on multiple remote hosts. Relies upon the SSH module."),(0,l.kt)("li",{parentName:"ol"},"Message Passing Interface (MPI): executes a program in parallel using MPI. Only tested over MPICH at this time.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Exec")," has a simple syntax. It takes as input a command (cmd) and how the command should be executed (",(0,l.kt)("inlineCode",{parentName:"p"},"exec_info"),"). For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"exec_info")," can be used to represent executing the command in parallel using MPI or locally on a machine using subprocess."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nExec(cmd, exec_info)\n")),(0,l.kt)("p",null,'Exec can be called with only specifying "cmd". In this case, the command will be executed locally. It\'s output will be printed to the terminal.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nExec(cmd)\n")),(0,l.kt)("h2",{id:"execinfo"},(0,l.kt)("inlineCode",{parentName:"h2"},"ExecInfo")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ExecInfo")," stores all information which may be needed to execute a command with a particular protocol. This includes information such as the location of private/public keys, hostfiles, environment variables. ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecInfo")," also includes parameters for collecting output from commands."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ExecInfo(exec_type=ExecType.LOCAL, nprocs=None, ppn=None,\n         user=None, pkey=None, port=None, hostfile=None, env=None,\n         sleep_ms=0, sudo=False, cwd=None, hosts=None,\n         collect_output=None, pipe_stdout=None, pipe_stderr=None,\n         hide_output=None, exec_async=False, stdin=None)\n")),(0,l.kt)("h3",{id:"specifying-execution-method-eg-ssh-vs-mpi"},"Specifying execution method (e.g., SSH vs MPI)"),(0,l.kt)("p",null,"There are many ways to execute a command: Subprocess, SSH, etc. To specify this, there is an enum with all currently supported methods. The supported methods are:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"ExecType.LOCAL")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"ExecType.SSH")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"ExecType.PSSH")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"ExecType.MPI"))),(0,l.kt)("p",null,"Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"exec_type")," will spawn the command using the particular approach. By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"exec_type")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"ExecType.LOCAL"),"."),(0,l.kt)("h3",{id:"managing-output-from-commands"},"Managing output from commands"),(0,l.kt)("p",null,"ExecInfo has three parameters for collecting output from commands:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"collect_output"),": Whether to store the output from the command in a buffer in Python. Will impact memory utilization if the command has large output. This is ",(0,l.kt)("inlineCode",{parentName:"li"},"False")," by default."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"pipe_stdout"),": Store stdout in a file. By default, this is ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"pipe_stderr"),": Store stderr in a file. By default, this is ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"hide_output"),": Don't print output.")),(0,l.kt)("p",null,"Unlike typical subprocess, you can perform any combination of these. Output can be collected at the same time it's being printed. This is particularly useful if you have a long-running process you want to collect output from AND ensure is still progressing. This is accomplished by spawning two threads: one for collecting stderr, and another for collecting stdout."),(0,l.kt)("h3",{id:"asynchronous-execution"},"Asynchronous execution"),(0,l.kt)("p",null,"ExecInfo enables the ability to execute a command asynchronously. This is particularly useful for running a daemon. For example, deploying a storage system requires the storage system to run as a service. This can cause the program to block forever unless asynchronous execution is enabled. Async execution is specified using the ",(0,l.kt)("inlineCode",{parentName:"p"},"exec_async=True"),"."),(0,l.kt)("h2",{id:"localexec"},(0,l.kt)("inlineCode",{parentName:"h2"},"LocalExec")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo\n")),(0,l.kt)("p",null,"The simplest way to execute a program locally is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nnode = Exec('echo hello')\n")),(0,l.kt)("p",null,'This will print "hello" to the console.'),(0,l.kt)("p",null,"However, if more control is needed, a ",(0,l.kt)("inlineCode",{parentName:"p"},"LocalExecInfo")," contains many helpful paramters.\nThe following demonstrates various examples of outputs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo\n\n# Will ONLY print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=False))\n# Will collect AND print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True))\n# Will collect BUT NOT print to the terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True,\n                                        hide_output=True))\n# Will collect, pipe to file, and print to terminal\nnode = Exec('echo hello', LocalExecInfo(collect_output=True,\n                                        pipe_stdout='/tmp/stdout.txt',\n                                        pipe_stderr='/tmp/stderr.txt'))\n")),(0,l.kt)("p",null,"To execute a program asynchronously, one can do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.local_exec import LocalExecInfo\n\nnode = Exec('echo hello', LocalExecInfo(exec_async=True))\nnode.wait()\n")),(0,l.kt)("h2",{id:"sshexec"},(0,l.kt)("inlineCode",{parentName:"h2"},"SshExec")),(0,l.kt)("p",null,'The following code will execute the "hostname" command on the local host using SSH.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.ssh_exec import SshExecInfo\n\nnode = Exec('hostname', SshExecInfo(hosts='localhost'))\n")),(0,l.kt)("h2",{id:"psshexec"},(0,l.kt)("inlineCode",{parentName:"h2"},"PsshExec")),(0,l.kt)("p",null,'The following code will execute the "hostname" command on all machines in the hostfile'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.pssh_exec import PsshExecInfo\n\nnode = Exec('hostname', PsshExecInfo(hostfile=\"/tmp/hostfile.txt\"))\n")),(0,l.kt)("h2",{id:"mpiexec"},(0,l.kt)("inlineCode",{parentName:"h2"},"MpiExec")),(0,l.kt)("p",null,'The following code will execute the "hostname" command on the local machine 24 times using MPI.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.mpi_exec import MpiExecInfo\n\nnode = Exec('hostname', MpiExecInfo(hostfile=None,\n                                    nprocs=24,\n                                    ppn=None))\n")),(0,l.kt)("p",null,'The following code will execute the "hostname" command on 4 nodes (specified in hostfile) using MPI.\n"ppn" stands for processes per node.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.shell.exec import Exec\nfrom jarvis_util.shell.mpi_exec import MpiExecInfo\n\nnode = Exec('hostname', MpiExecInfo(hostfile=\"/tmp/hostfile.txt\",\n                                    nprocs=4,\n                                    ppn=1))\n")))}m.isMDXComponent=!0}}]);