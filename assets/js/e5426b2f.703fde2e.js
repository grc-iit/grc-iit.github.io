"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[5763],{3447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"hermes/programming","title":"Programming","description":"In this section, we will discuss the general steps of building a program","source":"@site/docs/12-hermes/07-programming.md","sourceDirName":"12-hermes","slug":"/hermes/programming","permalink":"/docs/hermes/programming","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Adapters","permalink":"/docs/hermes/adapters"},"next":{"title":"Buffer Organizer","permalink":"/docs/hermes/components/buffer-organizer"}}');var r=n(74848),s=n(28453);const o={},c="Programming",a={},l=[{value:"Basic API Example",id:"basic-api-example",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"programming",children:"Programming"})}),"\n",(0,r.jsx)(t.p,{children:"In this section, we will discuss the general steps of building a program\non top of the Hermes native API. We will focus on the core data structures\nprovided by Hermes -- Buckets and Blobs."}),"\n",(0,r.jsxs)(t.p,{children:["To see demonstrations of the API, check out our ",(0,r.jsx)(t.a,{href:"https://github.com/HDFGroup/hermes/blob/master/test/unit/hermes/test_bucket.cc",children:"API tests"})]}),"\n",(0,r.jsx)(t.h2,{id:"basic-api-example",children:"Basic API Example"}),"\n",(0,r.jsx)(t.p,{children:"This example will place a blob into the DMSH and then retrieve that blob."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'#include <hermes.h>\n#include <bucket.h>\n\nint main() {\n  TRANSPARENT_HERMES();\n  Bucket bkt = HERMES->GetBucket("hello");\n  size_t blob_size = KILOBYTES(4);\n  Context ctx;\n\n  std::vector<int> data_put(1024, i);\n  bkt.Put<std::vector<int>>("0", data_put, ctx);\n\n  std::vector<int> data_get(1024, i);\n  bkt.Get<std::vector<int>>("0", data_get, ctx);\n\n  REQUIRE(data_put == data_get);\n}\n'})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"TRANSPARENT_HERMES()"})," will initialize your connection to Hermes"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"HERMES"})," is a singleton macro provided in hermes.h."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"GetBucket"})," will either create a bucket or get the bucket if it exists.\nThis operation is concurrency-safe. I.e., it is guaranteed only one\nthread or process calling this function will create the bucket if it\nDNE."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Context"})," is optional. It contains the ability to override\ndefaults defined in the server and client configuration files. For\nexample, you can set a custom DPE to use for a blob Put."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"hermes::Blob analagous to and std::vector<char>"}),". It's not quite the\nsame thing, but we won't go into detail here."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"bkt.Put"})," will put a blob into the bucket. Put replaces all content\nif the blob previously existed."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"bkt.Get"})," will get the contents of an entire blob."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);