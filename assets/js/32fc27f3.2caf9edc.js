"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[12293],{26691:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"hpc-tutorials/docker/docker-cluster","title":"Docker Clusters","description":"It can be useful to create clusters of Docker images for purposes of continuous","source":"@site/docs/02-hpc-tutorials/05-docker/02-docker-cluster.md","sourceDirName":"02-hpc-tutorials/05-docker","slug":"/hpc-tutorials/docker/docker-cluster","permalink":"/docs/hpc-tutorials/docker/docker-cluster","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Docker Guide","permalink":"/docs/hpc-tutorials/docker/docker-basics"},"next":{"title":"IOWarp","permalink":"/docs/category/iowarp"}}');var t=n(74848),o=n(28453);const i={},c="Docker Clusters",l={},a=[{value:"Setup",id:"setup",level:2},{value:"Create SSH keys",id:"create-ssh-keys",level:3},{value:"OpenSSH-Server Dockerfile",id:"openssh-server-dockerfile",level:2},{value:"Install OpenSSH",id:"install-openssh",level:3},{value:"Create a user",id:"create-a-user",level:3},{value:"Copy SSH keys",id:"copy-ssh-keys",level:3},{value:"Start SSH server",id:"start-ssh-server",level:3},{value:"Docker Compose File",id:"docker-compose-file",level:2},{value:"Build the cluster",id:"build-the-cluster",level:2},{value:"Spawn the cluster",id:"spawn-the-cluster",level:2},{value:"Execute commands",id:"execute-commands",level:2},{value:"Interactive shell with cluster nodes",id:"interactive-shell-with-cluster-nodes",level:2},{value:"Shutdown the cluster",id:"shutdown-the-cluster",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"docker-clusters",children:"Docker Clusters"})}),"\n",(0,t.jsx)(s.p,{children:"It can be useful to create clusters of Docker images for purposes of continuous\nintegration. In this section, we provide an example of spawning a cluster of two\nnodes and executing commands in them."}),"\n",(0,t.jsx)(s.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(s.p,{children:"First, cd into the correct tutorial directory."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"cd ${SCS_TUTORIAL}/5.2.docker_clusters\n"})}),"\n",(0,t.jsx)(s.p,{children:"This directory contains two files:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Dockerfile"}),"\n",(0,t.jsx)(s.li,{children:"docker-compose.yml"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"create-ssh-keys",children:"Create SSH keys"}),"\n",(0,t.jsxs)(s.p,{children:["Next we need to create SSH keys. We will place the SSH keys\nin the current working directory, ",(0,t.jsx)(s.strong,{children:"NOT"})," in ~/.ssh. Data cannot\nbe copied to a Docker container at build time unless that data\nis a subdirectory of the current working directory."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:'ssh-keygen -t rsa -f ${PWD}/id_rsa -N "" -q\n'})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"-t rsa"})," uses RSA for the algorithm."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"-f ${PWD}/id_rsa"})," defines the output for the private key to be in this directory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:'-N ""'})," indicates no password should be generated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"-q"})," disables interactive prompts."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"openssh-server-dockerfile",children:"OpenSSH-Server Dockerfile"}),"\n",(0,t.jsxs)(s.p,{children:["We have a sample ",(0,t.jsx)(s.a,{href:"https://github.com/scs-lab/scs-tutorial/blob/main/5.2.docker_clusters/Dockerfile",children:"Dockerfile"})," which provides passwordless openssh\ndaemon in ubuntu 20.04. We describe the sections of the Dockerfile below."]}),"\n",(0,t.jsx)(s.h3,{id:"install-openssh",children:"Install OpenSSH"}),"\n",(0,t.jsx)(s.p,{children:"First, we install openssh, sudo, some text editors, and git.\nTechnically, git and the text editors aren't required, but they\nalmost always come in useful in real projects."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dockerfile",children:'# Install ubuntu 20.04\nFROM ubuntu:20.04\nLABEL maintainer="llogan@hawk.illinoistech.edu"\nLABEL version="0.0"\nLABEL description="An example docker image"\n\n# Disable Prompt During Packages Installation\nARG DEBIAN_FRONTEND=noninteractive\n\n# Update ubuntu\nRUN apt update && apt install\n\n# Install some basic packages\nRUN apt install -y \\\n    openssh-server \\\n    sudo git nano vim\n'})}),"\n",(0,t.jsx)(s.h3,{id:"create-a-user",children:"Create a user"}),"\n",(0,t.jsx)(s.p,{children:'Next, we create a new user called "sshuser". Many tools complain about\nusing root mode for everything. While technically safe to do in a container,\nwe make a custom user anyway.'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dockerfile",children:"# Create a new user\n# -m makes the home directory\nRUN useradd -m sshuser\n\n# Make the user an admin\nRUN usermod -aG sudo sshuser\n\n# Disable password for this user\nRUN passwd -d sshuser\n"})}),"\n",(0,t.jsx)(s.h3,{id:"copy-ssh-keys",children:"Copy SSH keys"}),"\n",(0,t.jsx)(s.p,{children:"We now copy the SSH keys from the host machine to the client machine and give\nthem the proper permissions. The SSH keys we created in section 5.2.2 should be\nlocated in the same directory as this Dockerfile."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dockerfile",children:"# Copy the host's SSH keys\n# Docker requires COPY be relative to the current working\n# directory. We cannot pass ~/.ssh/id_rsa unfortunately...\nRUN sudo -u sshuser mkdir ${SSHDIR}\nCOPY id_rsa ${SSHDIR}/id_rsa\nCOPY id_rsa.pub ${SSHDIR}/id_rsa.pub\n\n# Authorize host SSH keys\nRUN sudo -u sshuser touch ${SSHDIR}/authorized_keys\nRUN cat ${SSHDIR}/id_rsa.pub >> ${SSHDIR}/authorized_keys\n\n# Set SSH permissions\nRUN chmod 700 ${SSHDIR}\nRUN chmod 644 ${SSHDIR}/id_rsa.pub\nRUN chmod 600 ${SSHDIR}/id_rsa\nRUN chmod 600 ${SSHDIR}/authorized_keys\n"})}),"\n",(0,t.jsx)(s.h3,{id:"start-ssh-server",children:"Start SSH server"}),"\n",(0,t.jsx)(s.p,{children:"Lastly, we configure the openssh server to allow for empty passwords and\nthen start it."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-dockerfile",children:'# Enable passwordless SSH\n# Replaces #PermitEmptyPasswords no with PermitEmptyPasswords yes\nRUN sed -i \'s/#PermitEmptyPasswords no/PermitEmptyPasswords yes/\' /etc/ssh/sshd_config\n\n# Create this directory, because sshd doesn\'t automatically\nRUN mkdir /run/sshd\n\n# Start SSHD\nCMD ["/usr/sbin/sshd", "-D"]\n'})}),"\n",(0,t.jsx)(s.h2,{id:"docker-compose-file",children:"Docker Compose File"}),"\n",(0,t.jsx)(s.p,{children:"Docker compose is used to spawn multiple docker containers. This has\na separate configuration."}),"\n",(0,t.jsxs)(s.p,{children:["Below is our example ",(0,t.jsx)(s.a,{href:"https://github.com/scs-lab/scs-tutorial/blob/main/5.2.docker_clusters/docker-compose.yaml",children:"docker-compose.yaml"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'version: "3"\n\nservices:\n  node1:\n    build: .\n    links:\n      - node2\n    networks:\n      - net\n    hostname: node1\n    stdin_open: true\n    tty: true\n\n  node2:\n    build: .\n    networks:\n      - net\n    hostname: node2\n    stdin_open: true\n    tty: true\n\nnetworks:\n  net:\n    driver: bridge\n'})}),"\n",(0,t.jsx)(s.p,{children:'Here we create two nodes: node1 and node2. The "services" section represents the\nset of nodes that will be spawned.'}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"node1 and node2 are the names of the containers that will be spawned."}),"\n",(0,t.jsx)(s.li,{children:"build: where docker-compose will search for the Dockerfile. In our case,\nits the local directory. We used the default names for the Dockerfile and\ndocker-compose.yaml."}),"\n",(0,t.jsx)(s.li,{children:'networks: label the network the containers are apart of.\n"net" is not special; it is just a name, it can be anything.'}),"\n",(0,t.jsx)(s.li,{children:"hostname: the name of the host on the network. We force the containers\nhostname to be equivalent to the name of the container."}),"\n",(0,t.jsx)(s.li,{children:"links: enable communication between two nodes. Note, node2 doesn't specify\na link to node1. This is because links are already two-way, so it will\nresult in a cyclic dependency error."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"build-the-cluster",children:"Build the cluster"}),"\n",(0,t.jsx)(s.p,{children:"First we have to build the container images for the cluster. This will\nparse docker-compose.yaml (which is the default name used by docker-compose)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo HOST_USER=${USER} docker-compose build\n"})}),"\n",(0,t.jsx)(s.h2,{id:"spawn-the-cluster",children:"Spawn the cluster"}),"\n",(0,t.jsx)(s.p,{children:"To spawn the cluster, run the following command"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo HOST_USER=${USER} docker-compose up -d\n"})}),"\n",(0,t.jsx)(s.h2,{id:"execute-commands",children:"Execute commands"}),"\n",(0,t.jsx)(s.p,{children:"First, we will verify node1 and node2 can be accessed:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo docker-compose exec -u sshuser node1 hostname\nsudo docker-compose exec -u sshuser node2 hostname\n"})}),"\n",(0,t.jsx)(s.p,{children:'These commands should print "node1" and "node2".'}),"\n",(0,t.jsx)(s.p,{children:"Next, we will try performing ssh from one node into the other."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo docker-compose exec -u sshuser node1 ssh node2 hostname\n"})}),"\n",(0,t.jsx)(s.p,{children:'The above command will execute "ssh node2 hostname" in node1.'}),"\n",(0,t.jsx)(s.h2,{id:"interactive-shell-with-cluster-nodes",children:"Interactive shell with cluster nodes"}),"\n",(0,t.jsx)(s.p,{children:"To get an interactive shell of a node in the cluster, do the following"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo docker-compose exec -u sshuser node1 /bin/bash\n"})}),"\n",(0,t.jsx)(s.h2,{id:"shutdown-the-cluster",children:"Shutdown the cluster"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sudo docker-compose down\n"})})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(96540);const t={},o=r.createContext(t);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);