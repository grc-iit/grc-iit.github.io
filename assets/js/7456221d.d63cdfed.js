"use strict";(self.webpackChunkgnosis=self.webpackChunkgnosis||[]).push([[4407],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>d});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),p=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=p(e.components);return t.createElement(o.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,d=m["".concat(o,".").concat(h)]||m[h]||g[h]||s;return a?t.createElement(d,l(l({ref:n},u),{},{components:a})):t.createElement(d,l({ref:n},u))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=h;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=a[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2222:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const s={},l="Argument Parsing",i={unversionedId:"jarvis/jarvis-util/argument-parsing",id:"jarvis/jarvis-util/argument-parsing",title:"Argument Parsing",description:"We provide a custom argument parsing implementation. The main difference between",source:"@site/docs/05-jarvis/01-jarvis-util/04-argument-parsing.md",sourceDirName:"05-jarvis/01-jarvis-util",slug:"/jarvis/jarvis-util/argument-parsing",permalink:"/docs/jarvis/jarvis-util/argument-parsing",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Built-in Wrappers",permalink:"/docs/jarvis/jarvis-util/builtin-wrappers"},next:{title:"Hostfile",permalink:"/docs/jarvis/jarvis-util/hostfile"}},o={},p=[{value:"Defining Arguments",id:"defining-arguments",level:2},{value:"Required Positional Arguments",id:"required-positional-arguments",level:3},{value:"Optional Positional Arguments",id:"optional-positional-arguments",level:3},{value:"<code>keyword</code> Arguments",id:"keyword-arguments",level:3},{value:"Detecting Explicitly Set Parameters",id:"detecting-explicitly-set-parameters",level:3},{value:"Help",id:"help",level:3},{value:"Menus",id:"menus",level:2},{value:"VPIC Menu",id:"vpic-menu",level:3},{value:"BD-CATS Run Menu",id:"bd-cats-run-menu",level:3},{value:"BD-CATS Draw Menu",id:"bd-cats-draw-menu",level:3},{value:"Argument Types",id:"argument-types",level:2},{value:"Boolean Arguments",id:"boolean-arguments",level:3},{value:"<code>True</code>",id:"true",level:4},{value:"<code>False</code>",id:"false",level:4},{value:"List Arguments",id:"list-arguments",level:3},{value:"Nested List Arguments",id:"nested-list-arguments",level:3},{value:"Tracking Remaining Arguments",id:"tracking-remaining-arguments",level:2},{value:"List Remainder",id:"list-remainder",level:3},{value:"Key-Value Remainder",id:"key-value-remainder",level:3},{value:"Choice Arguments",id:"choice-arguments",level:2}],u={toc:p},m="wrapper";function g(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"argument-parsing"},"Argument Parsing"),(0,r.kt)("p",null,'We provide a custom argument parsing implementation. The main difference between\nthis argparser and others is that we support the concept of "menus".\nJarvis calls sub-modules, which each have their own specific interfaces.\nThere are sub-modules for modifying the resource graph, initializing jarvis,\ncreating pipelines, etc. These modules each have different parameter spaces.'),(0,r.kt)("h2",{id:"defining-arguments"},"Defining Arguments"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ArgParse")," class has an abstract method called define_options. Create\na class inheriting from that method and use define_options to make the menu."),(0,r.kt)("p",null,"We have the example ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grc-iit/jarvis-util/blob/master/example/basic_argparse.py"},"basic_argparse.py")," below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu()\n        self.add_args([\n            {\n                'name': 'hello',\n                'msg': 'A message to print',\n                'type': str,  # The type of this variable\n                'required': True,  # This argument is required\n                'pos': True,  # This is a positional argument\n            },\n            {\n                'name': 'hello_optional',\n                'msg': 'An optional message to print',\n                'type': str,  # The type of the variable to produce\n                'default': 'no optional message given',\n                'required': False,  # This argument is not required\n                'pos': True,  # This is a positional argument\n            },\n            {\n                'name': 'hello_kwarg',\n                'msg': 'An integer keyword argument to print',\n                'type': int,  # The type of the variable\n                'default': 0,\n            },\n        ])\n\n    # When add_menu has no parameters, process_args will call this function\n    def main_menu(self):\n        # Parsed parameters are placed in self.kwargs\n        print(self.kwargs['hello'])\n        print(self.kwargs['hello_optional'])\n        print(self.kwargs['hello_kwarg'])\n        print(self.real_kwargs)\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("h3",{id:"required-positional-arguments"},"Required Positional Arguments"),(0,r.kt)("p",null,'The first argument we defined was "hello", which is a required parameter.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{\n    'name': 'hello',\n    'msg': 'A message to print',\n    'type': str,  # The type of this variable\n    'required': True,  # This argument is required\n    'pos': True,  # This is a positional argument\n}\n")),(0,r.kt)("p",null,"This is the only required parameter in this case. We can run the program\nabove with only this one parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/basic_argparse.py 'my required msg'\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my required msg\nno optional message given\n0\n{'hello_kwarg': 0, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\n{'hello': 'my required msg'}\n")),(0,r.kt)("h3",{id:"optional-positional-arguments"},"Optional Positional Arguments"),(0,r.kt)("p",null,'The second argument we defined was "hello_optional", which is optional.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{\n    'name': 'hello_optional',\n    'msg': 'An optional message to print',\n    'type': str,  # The type of the variable to produce\n    'default': 'no optional message given',\n    'required': False,  # This argument is not required\n    'pos': True,  # This is a positional argument\n}\n")),(0,r.kt)("p",null,"To input the optional positional parameter, run the command below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/basic_argparse.py 'my required msg' 'my optional message'\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my required msg\nmy optional message\n0\n{'hello_kwarg': 0, 'hello': 'my required msg', 'hello_optional': 'my optional message'}\n{'hello': 'my required msg', 'hello_optional': 'my optional message'}\n")),(0,r.kt)("h3",{id:"keyword-arguments"},(0,r.kt)("inlineCode",{parentName:"h3"},"keyword")," Arguments"),(0,r.kt)("p",null,'The third argument we defined was "hello_kwarg". keyword arguments are\nalways optional. The default value, if not specified, will be None.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{\n    'name': 'hello_kwarg',\n    'msg': 'An integer keyword argument to print',\n    'type': int,  # The type of the variable\n    'default': 0,\n}\n")),(0,r.kt)("p",null,"The following commands are all correct and mean the same thing. You can\nuse -- and - in front of keyword arguments. They mean the same thing.\nWe support this for more legacy reasons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/basic_argparse.py 'my required msg' hello_kwarg=124\npython3 example/basic_argparse.py 'my required msg' --hello_kwarg=124\npython3 example/basic_argparse.py 'my required msg' -hello_kwarg=124\n")),(0,r.kt)("p",null,"In each case, the output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my required msg\nno optional message given\n124\n{'hello_kwarg': 124, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\n{'hello': 'my required msg', 'hello_kwarg': 124}\n")),(0,r.kt)("h3",{id:"detecting-explicitly-set-parameters"},"Detecting Explicitly Set Parameters"),(0,r.kt)("p",null,"Sometimes, it's good to know what parameters the user set explicitly, without filling in default values for everything. self.kwargs stores the entire parameter scope with default values filled in, whereas self.real_kwargs stores the values passed in specifically by the users."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 example/basic_argparse.py 'my required msg' hello_kwarg=124\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my required msg\nno optional message given\n124\n{'hello_kwarg': 124, 'hello': 'my required msg', 'hello_optional': 'no optional message given'}\n{'hello': 'my required msg', 'hello_kwarg': 124}\n")),(0,r.kt)("p",null,"Notice that self.real_kwargs (last line) does not have 'hello_optional', since it was not passed explicitly by the user."),(0,r.kt)("h3",{id:"help"},"Help"),(0,r.kt)("p",null,'You can print the help message by using the "h" or "help" keyword arguments.\nThese are provided automatically and should not be manually defined.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/basic_argparse.py h\npython3 example/basic_argparse.py -h\npython3 example/basic_argparse.py --help\npython3 example/basic_argparse.py -help\npython3 example/basic_argparse.py help\n")),(0,r.kt)("p",null,"In each case, the output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"USAGE: basic_argparse.py  [hello] [hello_optional (opt)] ...\n\nName            Default                    Type    Description\n--------------  -------------------------  ------  -------------------------------------\nhello                                      str     A message to print\nhello_optional  no optional message given  str     An optional message to print\nhello_kwarg     0                          int     An integer keyword argument to print\nhelp            False                      bool    Print help menu\nh               False                      bool    Print help menu\n")),(0,r.kt)("h2",{id:"menus"},"Menus"),(0,r.kt)("p",null,"Let's say we're building an application launcher. Each application has it's\nown parameter space. We have two applications:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"VPIC: A particle simulator code"),(0,r.kt)("li",{parentName:"ol"},"BD-CATS: A particle clustering code")),(0,r.kt)("p",null,"VPIC only has one operation: to generate the particle data."),(0,r.kt)("p",null,"BD-CATS has two operations: cluster the particle data and then visualize\nthe clustering by rendering an image at a certain resolution."),(0,r.kt)("p",null,"Below is the code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grc-iit/jarvis-util/blob/master/example/menu_argparse.py"},"example/menu_argparse.py"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu('vpic')\n        self.add_args([\n            {\n                'name': 'steps',\n                'msg': 'Number of execution steps',\n                'type': int,  # The type of this variable\n                'required': True,  # This argument is required\n                'pos': True,  # This is a positional argument\n            }\n        ])\n\n        self.add_menu('bd-cats run')\n        self.add_args([\n            {\n                'name': 'path',\n                'msg': 'Path to particle data',\n                'type': str,  # The type of this variable\n                'required': True,  # This argument is required\n                'pos': True,  # This is a positional argument\n            }\n        ])\n\n        self.add_menu('bd-cats draw')\n        self.add_args([\n            {\n                'name': 'resolution',\n                'msg': 'Dimensions of the image to create',\n                'type': str,  # The type of this variable\n                'required': True,  # This argument is required\n                'pos': True,  # This is a positional argument\n            }\n        ])\n\n    def vpic(self):\n        print(f'Starting VPIC with {self.kwargs[\"steps\"]} steps')\n\n    def bd_cats_run(self):\n        print(f'Starting BD-CATS with {self.kwargs[\"path\"]}')\n\n    def bd_cats_draw(self):\n        print(f'Drawing BD-CATS output at {self.kwargs[\"resolution\"]}')\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,"process_args will execute the function corresponding to the menu name.\nIn this case, the menu names are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"vpic"),(0,r.kt)("li",{parentName:"ol"},"bdcats run"),(0,r.kt)("li",{parentName:"ol"},"bdcats draw")),(0,r.kt)("h3",{id:"vpic-menu"},"VPIC Menu"),(0,r.kt)("p",null,"The following code defines the VPIC menu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"self.add_menu('vpic')\nself.add_args([\n    {\n        'name': 'steps',\n        'msg': 'Number of execution steps',\n        'type': int,  # The type of this variable\n        'required': True,  # This argument is required\n        'pos': True,  # This is a positional argument\n    }\n])\n")),(0,r.kt)("p",null,"To execute the VPIC menu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 example/menu_argparse.py vpic 24\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Starting VPIC with 24 steps\n")),(0,r.kt)("h3",{id:"bd-cats-run-menu"},"BD-CATS Run Menu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"self.add_menu('bd-cats draw')\nself.add_args([\n    {\n        'name': 'resolution',\n        'msg': 'Dimensions of the image to create',\n        'type': str,  # The type of this variable\n        'required': True,  # This argument is required\n        'pos': True,  # This is a positional argument\n    }\n])\n")),(0,r.kt)("p",null,"process_args will search for the method name corresponding to 'bd-cats draw'.\nThe corresponding method name replaces all spaces with '","_","' and all '-' with\n'","_","'. In this case, it will search for bd_cats_run."),(0,r.kt)("p",null,"To execute the BD-CATS run menu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 example/menu_argparse.py bd-cats run /tmp/output.bin\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Starting BD-CATS with /tmp/output.bin\n")),(0,r.kt)("h3",{id:"bd-cats-draw-menu"},"BD-CATS Draw Menu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"self.add_menu('bd-cats draw')\nself.add_args([\n    {\n        'name': 'resolution',\n        'msg': 'Dimensions of the image to create',\n        'type': str,  # The type of this variable\n        'required': True,  # This argument is required\n        'pos': True,  # This is a positional argument\n    }\n])\n")),(0,r.kt)("p",null,"process_args will search for the method name corresponding to 'bd-cats draw'.\nThe corresponding method name replaces all spaces with '","_","' and all '-' with\n'","_","'. In this case, it will search for bd_cats_draw."),(0,r.kt)("p",null,"To execute the BD-CATS draw menu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 example/menu_argparse.py bd-cats run /tmp/output.bin\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Drawing BD-CATS output at 4096x4096\n")),(0,r.kt)("h2",{id:"argument-types"},"Argument Types"),(0,r.kt)("p",null,"We currently support five main types of arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Strings"),(0,r.kt)("li",{parentName:"ol"},"Integers"),(0,r.kt)("li",{parentName:"ol"},"Floats"),(0,r.kt)("li",{parentName:"ol"},"Booleans"),(0,r.kt)("li",{parentName:"ol"},"Lists of the above types")),(0,r.kt)("p",null,"Of these, booleans and lists are somewhat special."),(0,r.kt)("h3",{id:"boolean-arguments"},"Boolean Arguments"),(0,r.kt)("p",null,"Booleans are special in the sense that they have a special command line\nsyntax when used as keyword arguments (as opposed to positional)."),(0,r.kt)("p",null,"Let's say we are at a restaurant and are ordering pasta. You have\ntwo options: with cheese and without cheese."),(0,r.kt)("p",null,"Below is the code from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grc-iit/jarvis-util/blob/master/example/boolean_spaghetti.py"},"example/boolean_spaghetti.py"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu('spaghetti')\n        self.add_args([\n            {\n                'name': 'cheese',\n                'msg': 'Whether to use cheese',\n                'type': bool,  # The type of this variable\n                'default': True\n            }\n        ])\n\n    def spaghetti(self):\n        if self.kwargs['cheese']:\n            print('I will take the spaghetti with cheese')\n        else:\n            print('I want actual Italian, and will not take your cheese')\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("h4",{id:"true"},(0,r.kt)("inlineCode",{parentName:"h4"},"True")),(0,r.kt)("p",null,"There are two ways to indicate truth"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/boolean_spaghetti.py spaghetti --cheese=true\npython3 example/boolean_spaghetti.py spaghetti +cheese\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"I will take the spaghetti with cheese\n")),(0,r.kt)("h4",{id:"false"},(0,r.kt)("inlineCode",{parentName:"h4"},"False")),(0,r.kt)("p",null,"There are two ways to indicate false"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/boolean_spaghetti.py spaghetti --cheese=false\npython3 example/boolean_spaghetti.py spaghetti -cheese\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"I want actual Italian, and will not take your cheese\n")),(0,r.kt)("h3",{id:"list-arguments"},"List Arguments"),(0,r.kt)("p",null,"There are many cases where having a list of information is needed.\nOne case that comes up is deciding which nodes in a distributed system\nto execute software. For this case, we use a list of strings."),(0,r.kt)("p",null,"Below we have an example of running the VPIC application on a set\nof machines in parallel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu('vpic run',\n                      keep_remainder=False)\n        self.add_args([\n            {\n                'name': 'hosts',\n                'msg': 'A list of hosts and threads pr',\n                'type': list,\n                'args': [\n                    {\n                        'name': 'host',\n                        'msg': 'A string representing a host',\n                        'type': str,\n                    }\n                ]\n            }\n        ])\n\n    def vpic_run(self):\n        print(self.kwargs['hosts'])\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,"To pass a list of strings, run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'python3 example/hostfile_test.py vpic run --hosts="[127.0.0.1, 10.0.0.1]"\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"['127.0.0.1', '10.0.0.1']\n")),(0,r.kt)("h3",{id:"nested-list-arguments"},"Nested List Arguments"),(0,r.kt)("p",null,"Sometimes, you may want to have a list of lists. We use YAML format\nto parse such a thing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu('vpic run',\n                      keep_remainder=False)\n        self.add_args([\n            {\n                'name': 'hosts',\n                'msg': 'A list of hosts and threads per-host',\n                'type': list,\n                'args': [\n                    {\n                        'name': 'host',\n                        'msg': 'Host name',\n                        'type': str,\n                    },\n                    {\n                        'name': 'count',\n                        'msg': 'The number of devices to search for',\n                        'type': int,\n                    }\n                ]\n            }\n        ])\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,"To pass a list of strings and ints, run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'python3 example/hostfile_threads_test.py vpic run --hosts="[[127.0.0.1, 4], [10.0.0.1, 4]]"\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[['127.0.0.1', 4], ['10.0.0.1', 4]]\n")),(0,r.kt)("h2",{id:"tracking-remaining-arguments"},"Tracking Remaining Arguments"),(0,r.kt)("p",null,"Sometimes, you don't want your argument parser to error if a parameter is\nunrecognized. You may want to implement a special syntax for parsing the\nremaining parameters."),(0,r.kt)("p",null,'In this case, menus provide the "keep_remainder" option and "remainder_as_kv" options.'),(0,r.kt)("h3",{id:"list-remainder"},"List Remainder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu(keep_remainder=True)\n        self.add_args([\n            {\n                'name': 'hi',\n                'msg': 'hello',\n                'type': str,\n                'default': None\n            }\n        ])\n\n    def main_menu(self):\n        print(self.kwargs['hi'])\n        print(self.remainder)\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,'This will create a keyword argument name "hi", which takes as input a string,\nand keeps the remaining arguments in a list named "self.remainder".'),(0,r.kt)("p",null,"Run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/remainder.py --hi=hi 1 2 3 4 5\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"hi\n['1', '2', '3', '4', '5']\n")),(0,r.kt)("h3",{id:"key-value-remainder"},"Key-Value Remainder"),(0,r.kt)("p",null,"Sometimes the remainder should be stored as a dict instead of\na list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu(keep_remainder=True,\n                      remainder_as_kv=True)\n        self.add_args([\n            {\n                'name': 'hi',\n                'msg': 'hello',\n                'type': str,\n                'default': None\n            }\n        ])\n\n    def main_menu(self):\n        print(self.kwargs['hi'])\n        print(self.remainder_kv)\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,'This will create a keyword argument name "hi", which takes as input a string, and keeps the remaining arguments in a dict named "self.remainder_kv".'),(0,r.kt)("p",null,"Run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/remainder_kv.py --hi=hi VAR1=25 VAR2=26\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"hi\n{'VAR1': '25', 'VAR2': '26'}\n")),(0,r.kt)("h2",{id:"choice-arguments"},"Choice Arguments"),(0,r.kt)("p",null,"Sometimes you have parameters which have a well-defined set of values.\nIn this case, you can define 'choices'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from jarvis_util.util.argparse import ArgParse\n\n\nclass MyArgParse(ArgParse):\n    def define_options(self):\n        self.add_menu()\n        self.add_args([\n            {\n                'name': 'hi',\n                'msg': 'hello',\n                'type': str,\n                'choices': ['a', 'b', 'c'],\n                'default': None\n            }\n        ])\n\n    def main_menu(self):\n        print(self.kwargs['hi'])\n\n\nargs = MyArgParse()\nargs.process_args()\n")),(0,r.kt)("p",null,"Example of correct input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/choices.py hi=a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"a\n")),(0,r.kt)("p",null,"Example of incorrect input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 example/choices.py hi=d\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"In the menu , hi=d is not a valid choice\nUSAGE: choices.py   ...\n\nName    Default    Type    Description\n------  ---------  ------  ---------------\nhi                 str     hello\nhelp    False      bool    Print help menu\nh       False      bool    Print help menu\nIn the menu , hi was not of type <class 'str'>\nUSAGE: choices.py   ...\n")))}g.isMDXComponent=!0}}]);