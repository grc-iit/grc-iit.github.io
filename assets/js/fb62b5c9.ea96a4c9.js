"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[1680],{74076:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"iowarp/ipc/utilities/compress","title":"Compress","description":"HSHM provides an interface to many compression libraries (if built with compress support).","source":"@site/docs/11-iowarp/02-ipc/05-utilities/02-compress.md","sourceDirName":"11-iowarp/02-ipc/05-utilities","slug":"/iowarp/ipc/utilities/compress","permalink":"/docs/iowarp/ipc/utilities/compress","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Singleton","permalink":"/docs/iowarp/ipc/utilities/singleton"},"next":{"title":"Encryption","permalink":"/docs/iowarp/ipc/utilities/encrypt"}}');var t=s(74848),r=s(28453);const o={},l="Compress",c={},p=[{value:"The Factory",id:"the-factory",level:2},{value:"The Algorithms",id:"the-algorithms",level:2},{value:"An example",id:"an-example",level:2}];function a(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"compress",children:"Compress"})}),"\n",(0,t.jsx)(i.p,{children:"HSHM provides an interface to many compression libraries (if built with compress support)."}),"\n",(0,t.jsx)(i.h2,{id:"the-factory",children:"The Factory"}),"\n",(0,t.jsx)(i.p,{children:"The compress factory exposes the following API:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-cpp",children:"class Compressor {\n public:\n  Compressor() = default;\n  virtual ~Compressor() = default;\n\n  /**\n   * Compress the input buffer into the output buffer\n   * */\n  virtual bool Compress(void *output, size_t &output_size, void *input,\n                        size_t input_size) = 0;\n\n  /**\n   * Decompress the input buffer into the output buffer.\n   * */\n  virtual bool Decompress(void *output, size_t &output_size, void *input,\n                          size_t input_size) = 0;\n};\n"})}),"\n",(0,t.jsx)(i.h2,{id:"the-algorithms",children:"The Algorithms"}),"\n",(0,t.jsx)(i.p,{children:"We support many compression algorithms:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"blosc"}),"\n",(0,t.jsx)(i.li,{children:"brotli"}),"\n",(0,t.jsx)(i.li,{children:"bzip2"}),"\n",(0,t.jsx)(i.li,{children:"lz4"}),"\n",(0,t.jsx)(i.li,{children:"lzma"}),"\n",(0,t.jsx)(i.li,{children:"lzo"}),"\n",(0,t.jsx)(i.li,{children:"snappy"}),"\n",(0,t.jsx)(i.li,{children:"zlib"}),"\n",(0,t.jsx)(i.li,{children:"zstd"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"an-example",children:"An example"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-cpp",children:'#include "hermes_shm/util/compress/compress_factory.h"\n\nint main() {\n    hshm::Zlib zlib;\n    size_t cmpr_size = 1024, raw_size = 1024;\n    zlib.Compress(compressed.data(), cmpr_size,\n                    raw.data(), raw.size());\n    zlib.Decompress(decompressed.data(), raw_size,\n                    compressed.data(), cmpr_size);\n    REQUIRE(raw == std::string(decompressed.data(), raw_size));\n}\n'})})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>l});var n=s(96540);const t={},r=n.createContext(t);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);