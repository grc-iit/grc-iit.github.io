"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[4485],{69448:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"hpc-tutorials/cpp-introduction/cpp-basic-syntax","title":"C++ Basic Syntax","description":"In this section, we will discuss some basic concepts of C and C++.","source":"@site/docs/02-hpc-tutorials/04-cpp-introduction/04-cpp-basic-syntax.md","sourceDirName":"02-hpc-tutorials/04-cpp-introduction","slug":"/hpc-tutorials/cpp-introduction/cpp-basic-syntax","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-basic-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building C++ with CMake","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-build-with-cmake"},"next":{"title":"C++ Style and Documentation","permalink":"/docs/hpc-tutorials/cpp-introduction/cpp-style-and-doc"}}');var s=i(74848),r=i(28453);const l={},a="C++ Basic Syntax",c={},d=[{value:"Builtin Numeric Types",id:"builtin-numeric-types",level:2},{value:"Sized Types",id:"sized-types",level:2},{value:"Simple Arrays",id:"simple-arrays",level:2},{value:"Structs",id:"structs",level:2},{value:"Memory Allocation and Pointers",id:"memory-allocation-and-pointers",level:2},{value:"Malloc + Free",id:"malloc--free",level:3},{value:"std::vector",id:"stdvector",level:3},{value:"Conditional Statements",id:"conditional-statements",level:2},{value:"Conditional Operators",id:"conditional-operators",level:3},{value:"If-Else",id:"if-else",level:3},{value:"Switch-Case",id:"switch-case",level:3},{value:"?:",id:"",level:3},{value:"Loop Statements",id:"loop-statements",level:2},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Do-While Loop",id:"do-while-loop",level:3},{value:"Files and I/O",id:"files-and-io",level:2},{value:"Basic Filesystem Operations",id:"basic-filesystem-operations",level:3},{value:"stdc++fs",id:"stdcfs",level:3},{value:"STDIO",id:"stdio",level:3},{value:"POSIX",id:"posix",level:3},{value:"Functions &amp; Parameters",id:"functions--parameters",level:2},{value:"Macros",id:"macros",level:2},{value:"Enum Classes",id:"enum-classes",level:2},{value:"Exercise: Kitchen Fire Investigation",id:"exercise-kitchen-fire-investigation",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"c-basic-syntax",children:"C++ Basic Syntax"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, we will discuss some basic concepts of C and C++.\nWe discuss both C and C++ since you will likely see both."}),"\n",(0,s.jsx)(n.h2,{id:"builtin-numeric-types",children:"Builtin Numeric Types"}),"\n",(0,s.jsx)(n.p,{children:"C++ has a number of builtin integer types."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Keyword"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"char"}),(0,s.jsx)(n.td,{children:"A signed 1-byte integer. Can represent ASCII character codes. Always 1 byte."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int"}),(0,s.jsx)(n.td,{children:"A signed integer. Typically 4 bytes."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"float"}),(0,s.jsx)(n.td,{children:"A fractional number. Typically 4 bytes."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"double"}),(0,s.jsx)(n.td,{children:"A large fractional number. Typically 8 bytes."})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  int x;\n  float x;\n  double x;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are also ",(0,s.jsx)(n.em,{children:"modifiers"})," which can be applied to these types. There\nare two primary types of modifiers: ",(0,s.jsx)(n.em,{children:"sign"})," modifiers and ",(0,s.jsx)(n.em,{children:"size"})," modifiers."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"sign"})," modifiers apply to int and char specifically."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Keyword"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"signed"}),(0,s.jsx)(n.td,{children:"The number can be negative"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"unsigned"}),(0,s.jsx)(n.td,{children:"The number cannot be negative"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"size"})," modifiers apply to int and double types specifically."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Keyword"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Applies to doubles?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"short"}),(0,s.jsx)(n.td,{children:"Decrease length of type"}),(0,s.jsx)(n.td,{children:"No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"long"}),(0,s.jsx)(n.td,{children:"Increase length of type"}),(0,s.jsx)(n.td,{children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"long long"}),(0,s.jsx)(n.td,{children:"Increase length of type more"}),(0,s.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Below are a few examples of the above:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  // int examples\n  long int a;\n  long long int b;\n  unsigned int c;\n  long unsigned int d;\n  unsigned long int e;\n  short int f;\n  short g;\n  long h;\n\n  // Double examples\n  long double g;\n  long long double h;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"sized-types",children:"Sized Types"}),"\n",(0,s.jsxs)(n.p,{children:["Certain types are guaranteed to have a specific size. They are included\nin the ",(0,s.jsx)(n.em,{children:"stdint.h"})," header file. Having a specific size to types is frequently\nuseful."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Keyword"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int8_t"}),(0,s.jsx)(n.td,{children:"Signed 8-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int16_t"}),(0,s.jsx)(n.td,{children:"Signed 16-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int32_t"}),(0,s.jsx)(n.td,{children:"Signed 32-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int64_t"}),(0,s.jsx)(n.td,{children:"Signed 64-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"uint8_t"}),(0,s.jsx)(n.td,{children:"Unsigned 8-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"uint16_t"}),(0,s.jsx)(n.td,{children:"Unsigned 16-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"uint32_t"}),(0,s.jsx)(n.td,{children:"Unsigned 32-bit integer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"uint64_t"}),(0,s.jsx)(n.td,{children:"Unsigned 64-bit integer"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Examples are below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <stdint.h>\n\nint main() {\n  int8_t a;\n  int16_t b;\n  uint64_t c;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"simple-arrays",children:"Simple Arrays"}),"\n",(0,s.jsx)(n.p,{children:"Arrays provide a way to define many instances of a single type quickly. Arrays\nare stored on the stack, and have limited space. Typically, an array shouldn't\nexceed more than 16KB of memory. This is not a hard rule, but I find it to be\ngenerally safe.  Larger allocations should be made on the heap using a memory\nallocator, which is described later."}),"\n",(0,s.jsx)(n.p,{children:"An example is below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  int hello[24];\n\n  hello[0] = 0;\n  hello[1] = 0;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We create an array containing 24 ints. We then set the first two elements\nof the array to 0."}),"\n",(0,s.jsx)(n.p,{children:"Arrays can also be initialized as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  int hello[24] = {\n    0, 1, 2, 3, 4, 5, 0\n  };\n\n  int hello2[24] = {0};\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The first five elements of ",(0,s.jsx)(n.em,{children:"hello"})," are initialized to 0 through 5. Elements 6\nand onwards are initialized to 0."]}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.em,{children:"hello2"}),", all elements are initialized to 0."]}),"\n",(0,s.jsx)(n.h2,{id:"structs",children:"Structs"}),"\n",(0,s.jsx)(n.p,{children:"structs can be used to logically group data."}),"\n",(0,s.jsx)(n.p,{children:"For example, we can create a struct to represent a wallet. The wallet contains\nmoney (in cents), driver's license, and a health insurance card."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdint.h>\n\nstruct Wallet {\n  uint8_t cents_;\n  char license_[32];\n  char health_id_[32];\n};  // notice the ; here\n\nint main() {\n  struct Wallet wallet;\n  wallet.pennies_ = 200;\n  strcpy(wallet.license_, "dontpullmeover");\n  strcpy(wallet.health_id_, "donthurtme");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'Our wallet contains 200 cents, a license with the text "dontpullmeover",\nand a health insure ID which states "donthurtme".'}),"\n",(0,s.jsx)(n.p,{children:"In addition, structs can be initialized using a special syntax to reduce lines\nof code. Here we initialize the Lemonade struct. The lemonade can have a certain\namount of sugar, water, lemon juice, and coloring."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"struct Lemonade {\n  int sugar_;  // grams\n  int water_;  // mL\n  int lemon_;  // mL\n  int color_[3];  // (Red, Green, Blue)\n}\n\nint main() {\n  // NOTE: 255, 255, 0 is yellow on the RGB color wheel\n  struct Lemonade sour = {0, 100, 10,\n                          255,255,0};\n  struct Lemonade sweet = {20, 100, 10,\n                           255,255,0};\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"memory-allocation-and-pointers",children:"Memory Allocation and Pointers"}),"\n",(0,s.jsx)(n.h3,{id:"malloc--free",children:"Malloc + Free"}),"\n",(0,s.jsxs)(n.p,{children:["The very vast majority of data must be stored using a memory allocator.\nThe C-style way to do this is with malloc and free. Generally, it's\nbad practice to directly use ",(0,s.jsx)(n.code,{children:"malloc"})," and ",(0,s.jsx)(n.code,{children:"free"}),". However, sometimes\nit is unavoidable. ",(0,s.jsx)(n.code,{children:"malloc"})," allocates memory, ",(0,s.jsx)(n.code,{children:"free"})," releases memory.\nWhen you fail to release memory using ",(0,s.jsx)(n.code,{children:"free"}),", it is referred to as a\n",(0,s.jsx)(n.strong,{children:"memory leak"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <cstdlib>  // malloc + free\n#include <cstring>  // memset\n\nint main() {\n  // Allocate\n  int *data = (int*)malloc(64 * sizeof(int));\n  // Clear\n  memset(data, 0, 64 * sizeof(int));\n\n  // Set integer 10 to 15\n  data[10] = 15;\n\n  // Allocate + clear\n  int *data2 = (int*)calloc(64, sizeof(int));\n\n  // Set integer 10 to 15\n  data2[10] = 15;\n\n  // Release data\n  free(data1);\n  free(data2);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When we perform ",(0,s.jsx)(n.code,{children:"int *data = (int*)malloc(64 * sizeof(int));"}),", malloc\nreturns a pointer (int*). A pointer is an address in memory which points to the\nlocation of data. Pointers are 8 bytes in size on 64-bit machines and\n4 bytes in size on 32-bit machines."]}),"\n",(0,s.jsx)(n.p,{children:'To create variables which have a pointer type, use "*".'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// A pointer to an integer\nint *hello;\n// hello1 & hello2 are pointers to integers\nint *hello1, *hello2;\n// hello3 is a pointer & hello4 is a regular integer\nint *hello3, hello4;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"stdvector",children:"std::vector"}),"\n",(0,s.jsx)(n.p,{children:"Alternatively to malloc and free -- generally recommended -- is using a vector.\nMemory leaks tend to plague C codebases -- especially for people beginning\nprogramming. It is one of the reasons why C is a difficult language to deal\nwith. You can avoid a memory leak using vectors. Vectors automatically release\ntheir memory when they go out of scope (i.e., when returning from a function).\nIn this case, the vector will be freed when returning from main."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <vector>\n\nint main() {\n  // Allocate 64 ints and set to 0.\n  std::vector<int> data(64, 0);\n\n  // Set integer 10 to 15\n  data[10] = 15;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,s.jsx)(n.p,{children:'Conditions are represented either using "if-else", "switch-case", or "?:".'}),"\n",(0,s.jsx)(n.p,{children:"Let's say you're making a game. Your character is currently shopping at a\nmarket, and they have two options:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Purchase fishing bait ($10)"}),"\n",(0,s.jsx)(n.li,{children:"Purchase fishing rod ($65)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We can implement this market using conditional statements. We show the\ndifferent ways to do this in the sections below."}),"\n",(0,s.jsx)(n.h3,{id:"conditional-operators",children:"Conditional Operators"}),"\n",(0,s.jsx)(n.p,{children:"C/C++ provides various conditional operators. These operators are generally used\nin if-else statements only. Conditional operators in C work only over integers\nand pointers. In C++, operators can be overloaded, which will be discussed later\nin 3.06."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A < B"})}),(0,s.jsx)(n.td,{children:"Less than operator. A is less than B."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A <= B"})}),(0,s.jsx)(n.td,{children:"Less than or equal operator. A is at most B."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A > B"})}),(0,s.jsx)(n.td,{children:"Greater than operator. A is larger than B."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A >= B"})}),(0,s.jsx)(n.td,{children:"Greater than or equal operator. A is at least B."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A == B"})}),(0,s.jsx)(n.td,{children:"Equality operator. A and B are the same"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A !\\= B"})}),(0,s.jsx)(n.td,{children:"Inequality operator. A and B are not the same."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A && B"})}),(0,s.jsx)(n.td,{children:"AND operator. Both A and B are true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"A \\\\ B"})}),(0,s.jsx)(n.td,{children:"OR operator. One of A or B is true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"!A"})}),(0,s.jsx)(n.td,{children:"NOT operator. Check if A is not true."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"if-else",children:"If-Else"}),"\n",(0,s.jsx)(n.p,{children:"If-else statements are generally used when conditions in the if-else\nstatement are complex."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdexcept>  // runtime_error\n\nsize_t market(int key) {\n  if (key == 1) {\n    return 10;\n  } else if (key == 2) {\n    return 65;\n  } else {\n    throw std::runtime_error("An invalid menu item");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's say key == 2. First, key == 1 is checked. Then key == 2 is checked.\nkey == 2 is true. Thus, the function returns 65."}),"\n",(0,s.jsx)(n.p,{children:"NOTE: if will return true if a value is larger than 0. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'int main() {\n  if (25) {\n    std::cout << "This is true" << std::endl;\n  }\n  if (1) {\n    std::cout << "This is also true" << std::endl;\n  }\n  if (0) {\n    std::cout << "This is false" << std::endl;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will have the following output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"This is true\nThis is also true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"switch-case",children:"Switch-Case"}),"\n",(0,s.jsx)(n.p,{children:"Switch-case avoids using if-else statements for simple integer comparisons.\nCompilers optimize switch-case statements and do not necessarily translate\ndirectly into if-else statements."}),"\n",(0,s.jsx)(n.p,{children:"In the previous example, when key == 2, if-else requires two comparisons.\nFirst, check if key == 1, and then check key == 2. Switch-case avoids\nchecking if key == 1 and jumps directly to key == 2, reducing the number\nof comparisons. With large switch-case statements, this can be a\nbenefit."}),"\n",(0,s.jsx)(n.p,{children:"In other words, this example is the best use case of a switch-case statement."}),"\n",(0,s.jsx)(n.p,{children:"With a swith-case, this would be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdexcept>  // runtime_error\n\nsize_t market(int key) {\n  switch(key) {\n    case 1: {\n      return 10;\n    }\n    case 2: {\n      return 64;\n    }\n    default: {\n      throw std::runtime_error("An invalid menu item");\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Switch-case can also use break statements."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdexcept>  // runtime_error\n\nsize_t market(int key) {\n  int val;\n  switch(key) {\n    case 1: {\n      val = 10;\n      break;  // Stop checking cases\n    }\n    case 2: {\n      val = 64;\n      break;  // Stop checking cases\n    }\n    default: {\n      throw std::runtime_error("An invalid menu item");\n    }\n  }\n  return val;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Break statements mean not to go to the next case. For example, if we\nremoved the break statement in case 1, we would have the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'size_t market(int key) {\n  int val;\n  switch(key) {\n    case 1: {\n      val = 10;\n    }\n    case 2: {\n      val = 64;\n      break;\n    }\n    default: {\n      throw std::runtime_error("An invalid menu item");\n    }\n  }\n  return val;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If key == 1, val would be set to 10, and then it would be set to 64.\nIn other words, val would be equal to 64, which is incorrect."}),"\n",(0,s.jsx)(n.h3,{id:"",children:"?:"}),"\n",(0,s.jsx)(n.p,{children:"?: is generally not very useful, but you may come across it\noccasionally. Sometimes it can reduce lines of code. It is used as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'size_t market(int key) {\n  if (key != 1 && key != 2) {\n    throw std::runtime_error("An invalid menu item");\n  }\n  // condition ? value when true : value when false;\n  // If key == 1, return 10\n  // Else, return 64.\n  return key == 1 ? 10 : 64;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Generally, ?: is used when the condition is very simple, and the values\nthe condition return are very simple. In the above example, this is true.\nAlthough switch-case is the most correct for this example."}),"\n",(0,s.jsx)(n.h2,{id:"loop-statements",children:"Loop Statements"}),"\n",(0,s.jsx)(n.p,{children:"There are two general types of loops in C++:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"for loop"}),"\n",(0,s.jsx)(n.li,{children:"while loop"}),"\n",(0,s.jsx)(n.li,{children:"do-while loop"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"for-loop",children:"For loop"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  for (int i = 0; i < 4; ++i) {\n    std::cout << i << std::endl;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"0\n1\n2\n3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"while-loop",children:"While loop"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  int i = 0;\n  while(i < 4) {\n    std::cout << i << std::endl;\n    ++i;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"0\n1\n2\n3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"do-while-loop",children:"Do-While Loop"}),"\n",(0,s.jsx)(n.p,{children:"Do-while statements execute the first iteration of the loop without\nchecking the condition first. This circumstance sometimes comes up."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int main() {\n  do {\n    std::cout << i << std::endl;\n    ++i;\n  } while(i < 4);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"0\n1\n2\n3\n"})}),"\n",(0,s.jsx)(n.h2,{id:"files-and-io",children:"Files and I/O"}),"\n",(0,s.jsx)(n.p,{children:"There are many ways to interact with files in C++. A file is an array of\nbytes. This list is not exhaustive, but these are three common ways:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"stdc++fs"}),"\n",(0,s.jsx)(n.li,{children:"STDIO"}),"\n",(0,s.jsx)(n.li,{children:"POSIX (*Linux-specific)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We will introduce each of them here."}),"\n",(0,s.jsx)(n.h3,{id:"basic-filesystem-operations",children:"Basic Filesystem Operations"}),"\n",(0,s.jsx)(n.p,{children:"Regardless of the API you use, filesystems have a few general\noperations:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a new file"}),"\n",(0,s.jsx)(n.li,{children:"Open an existing file"}),"\n",(0,s.jsx)(n.li,{children:"Write to a file"}),"\n",(0,s.jsx)(n.li,{children:"Read from a file"}),"\n",(0,s.jsx)(n.li,{children:"Query statistics of the file (e.g., file size, last modify time)"}),"\n",(0,s.jsx)(n.li,{children:"Close a file"}),"\n",(0,s.jsx)(n.li,{children:"Delete a file"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We won't show every API in this snippet. Instead, we'll show an example\nwhich demonstrates the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"How to create a new file and write to it"}),"\n",(0,s.jsx)(n.li,{children:"How to get the size of the file"}),"\n",(0,s.jsx)(n.li,{children:"How to read from the file"}),"\n",(0,s.jsx)(n.li,{children:"How to close the file"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"stdcfs",children:"stdc++fs"}),"\n",(0,s.jsxs)(n.p,{children:["This is technically the way C++ recommends to do File I/O in general.\nIn HPC, it doesn't get used very often, though. Most HPC programs use\nSTDIO or POSIX. However, we introduce here anyway. It is located in\n",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/grc-tutorial/blob/main/cpp/04-cpp-basic-syntax/src/libstd.cc",children:"libstdc.cc"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <fstream>\n#include <string>\n#include <filesystem>\n\nvoid create_data() {\n  // Write to a file using ofstream\n  std::ofstream out_file("example.txt");\n  if (out_file.is_open()) {\n    out_file << "Hello, World!" << std::endl;\n    out_file.close();\n  } else {\n    std::cout << "Error opening the file." << std::endl;\n    exit(1);\n  }\n}\n\nvoid read_data() {\n  // Get the size of the file\n  size_t file_size = std::filesystem::file_size("example.txt");\n\n  // Read from the file using ifstream\n  std::ifstream in_file("example.txt");\n  if (in_file.is_open()) {\n    std::string data(file_size, \'\\0\');\n    // Read the entire file into data string\n    in_file.read(data.data(), file_size);\n    in_file.close();\n    // Print out the data\n    std::cout << data << std::endl;\n  } else {\n    std::cout << "Error opening the file." << std::endl;\n    exit(1);\n  }\n}\n\nint main() {\n  create_data();\n  read_data();\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To compile & run the code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\nmkdir build\ncd build\nmake\n./bin/test_libstd\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Hello, World!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"stdio",children:"STDIO"}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates the basics of the STDIO API.\nThe code is located in ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/grc-tutorial/blob/main/cpp/04-cpp-basic-syntax/src/stdio.cc",children:"stdio.cc"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdio.h>\n#include <stdlib.h>\n\nvoid create_data() {\n  // Create a new file\n  FILE* file = fopen("example.txt", "w");\n  if (file == NULL) {\n    perror("Error creating the file");\n    return 1;\n  }\n\n  // Write to the file\n  std::string data = "Hello, World!\\n";\n  if (fwrite(data.c_str(), data.size(), 1, file) < 0) {\n    perror("Error writing to the file");\n    fclose(file);\n    return 1;\n  }\n\n  fclose(file);\n}\n\nvoid read_data() {\n  // Open file for reading\n  file = fopen("example.txt", "r");\n  if (file == NULL) {\n    perror("Error opening the file for reading");\n    return 1;\n  }\n\n  // Get the size of the file\n  fseek(file, 0L, SEEK_END);\n  long file_size = ftell(file);\n  if (file_size < 0) {\n    perror("Error getting file size");\n    fclose(file);\n    return 1;\n  }\n  fseek(file, 0L, SEEK_SET);\n\n  // Read the entire file into memory\n  std::string data(file_size + 1, \'\\0\');\n  if (fread(data.data(), 1, file_size, file) != file_size) {\n    perror("Error reading the file");\n    fclose(file);\n    return 1;\n  }\n  fclose(file);\n\n  // Print out the data\n  std::cout << data << std::endl;\n  return 0;\n}\n\nint main() {\n  create_data();\n  read_data();\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To compile & run the code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\nmkdir build\ncd build\nmake\n./bin/test_stdio\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Hello, World!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"posix",children:"POSIX"}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates the basics of the POSIX API.\nIt is located in ",(0,s.jsx)(n.a,{href:"https://github.com/grc-iit/grc-tutorial/blob/main/cpp/04-cpp-basic-syntax/src/posix.cc",children:"posix.cc"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <stdio.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n\nvoid create_data() {\n  // Create a new file\n  int out_fd = open("example.txt", O_CREAT | O_WRONLY, 0644);\n  if (out_fd == -1) {\n    perror("Error creating the file");\n    return 1;\n  }\n\n  // Write to the file\n  std::string data = "Hello, World!\\n";\n  ssize_t bytes_written = write(out_fd, data.c_str(), data.size());\n  if (bytes_written < 0) {\n    perror("Error writing to the file");\n    close(out_fd);\n    return 1;\n  }\n  close(out_fd);\n}\n\nvoid read_data() {\n  // Get the size of the file\n  struct stat st;\n  if (stat("example.txt", &st) == -1) {\n    perror("Error getting file size");\n    return 1;\n  }\n  off_t file_size = st.st_size;\n\n  // Open the file in read-only mode\n  out_fd = open("example.txt", O_RDONLY);\n  if (out_fd == -1) {\n    perror("Error opening the file for reading");\n    return 1;\n  }\n\n  // Read the entire file into memory\n  std::string data(file_size + 1, \'\\0\');  // NOTE: +1 for null-terminator\n  ssize_t bytes_read = read(out_fd, data.data(), file_size);\n  if (bytes_read < 0) {\n    perror("Error reading the file");\n    close(out_fd);\n    return 1;\n  }\n  close(out_fd);\n\n  // Print the data\n  std::cout << data << std::endl;\n}\n\nint main() {\n  create_data();\n  read_data();\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To compile & run the code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\nmkdir build\ncd build\nmake\n./bin/test_posix\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Hello, World!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"functions--parameters",children:"Functions & Parameters"}),"\n",(0,s.jsx)(n.p,{children:"In this section, we'll give a brief overview of different ways to pass\nparameters to functions."}),"\n",(0,s.jsx)(n.p,{children:"There are four general ways to pass data to a function:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pass by value"}),": copy data to the function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pass by left-value reference"}),": a reference to the data is passed to the function. Modifications to data in the function will be reflected after returning from the function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pass by right-value reference"}),": Right-value references represent temporary\nobjects. The main use case is to move data from one object into another."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pass by const reference"}),": Const references are special. They can either pass an existing object to a function by reference, or construct the object in-place and pass to the function. Both right-value and left-value references can be passed to const references."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "timer.h"\n#include <iostream>\n\n// Data will be copied to the function\n// This can be expensive for large objects\nvoid GetSumByValue(std::string data) {\n  int sum = 0;\n  for (const char &c : data) {\n    sum += c;\n  }\n}\n\n// Data will be passed by reference\n// This is more efficient than passing by value\n// data can be modified by the function\nvoid GetSumByLvalReference(std::string &data) {\n  int sum = 0;\n  for (const char &c : data) {\n    sum += c;\n  }\n}\n\n// Data will be passed by reference\n// Same as above, but data cannot be modified by the function\nvoid GetSumByConstReference(const std::string &data) {\n  int sum = 0;\n  for (const char &c : data) {\n    sum += c;\n  }\n}\n\n// Data will be moved to the function without copying\n// The original data object is no longer valid after this function\n// NOTE: && is a single operator, not two ampersands.\nvoid GetSumByRvalReference(std::string &&data) {\n  int sum = 0;\n  for (const char &c : data) {\n    sum += c;\n  }\n}\n\nint main() {\n  // Create a string of 16 MB\n  std::string data(16 * (1 << 20), \'a\');\n  Timer timer[3];\n\n  timer[0].Resume();\n  GetSumByValue(data);\n  timer[0].Pause();\n\n  timer[1].Resume();\n  GetSumByLvalReference(data);\n  timer[1].Pause();\n\n  timer[2].Resume();\n  GetSumByRvalReference(std::move(data));\n  timer[2].Pause();\n\n  std::cout << "By value: " << timer[0].GetUsec() << std::endl;\n  std::cout << "By lval reference: " << timer[1].GetUsec() << std::endl;\n  std::cout << "By rval reference: " << timer[2].GetUsec() << std::endl;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To compile & run the code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\nmkdir build\ncd build\nmake\n./bin/test_parameter_pass\n"})}),"\n",(0,s.jsx)(n.p,{children:"On my machine, the output was:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"By value: 6163.84\nBy lval reference: 0.04\nBy rval reference: 0.04\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generally, passing by value should be avoided. The main use of pass by value is\nfor simple types, such as integers and floats. Structs and objects should be\npassed by reference. Const references should be prioritized when they make sense\nto use."}),"\n",(0,s.jsx)(n.h2,{id:"macros",children:"Macros"}),"\n",(0,s.jsx)(n.p,{children:"Macros are replaced at compile-time with the code inside of the macro. Macros\nare not type-checked. They can be helpful to reduce code repetition or to\nchange the way code is compiled. Macros should be used sparingly, since\nthey increase the complexity of debugging code. It is difficult to debug\nmacros directly."}),"\n",(0,s.jsx)(n.p,{children:"Macros are sometimes used to define constants."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#define MY_CONST 0\n\nint main() {\n  // Will print 0\n  std::cout << MY_CONST << std::endl;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Macros can take parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#define MY_MACRO(A, B)  printf(A, B);\n\nint main() {\n  // Will print hi\n  MY_MACRO("%s\\n", "hi")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Macros can take a variable number of parameters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#define MY_MACRO(A, ...) printf(A, __VA_ARGS__)\n\nint main () {\n  // Will print 1243\n  MY_MACRO("%d%d%d\\n", 1, 2, 3);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'Macros can be defined on multiple lines using "":'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#define MY_MACRO \\\n  void MyFunc() { \\\n    std::cout << "hi" << std::endl; \\\n  }\n\nint main() {\n  MyFunc();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"enum-classes",children:"Enum Classes"}),"\n",(0,s.jsx)(n.p,{children:"Enumerations allow you to define a sequence of named integers. They\nare particularly useful with switch-case statements."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'enum class FruitEnum {\n  kApple,  // Equivalent to "0"\n  kBanana,  // Equivalent to "1"\n  kDragonFruit  // Equivalent to "2"\n};\n\nint main() {\n  FruitEnum my_enum = FruitEnum::kApple;\n  int enum_val = static_cast<int>(my_enum);\n\n  switch (my_enum) {\n    case FruitEnum::kApple: {\n      break;\n    }\n    default {\n      break;\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"exercise-kitchen-fire-investigation",children:"Exercise: Kitchen Fire Investigation"}),"\n",(0,s.jsx)(n.p,{children:"Pretend we are insurance auditors. We are investigating a kitchen fire which\nburned down a popular Chicago restaurant: O'leary Smoke House. Fortunately the\nentire city didn't burn down this time."}),"\n",(0,s.jsx)(n.p,{children:"The restaurant had a smart thermometer which was tracking the temperature\nand carbon monoxide (CO) level of the kitchen.\nWe want to analyze the dataset to determine the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"When did the fire start and end? We assume the fire is started when the\ntemperature is at least 95 Farenheit OR the CO level is 200ppm. The fire\nends when both of these statements are no longer true."}),"\n",(0,s.jsx)(n.li,{children:"What was the average temperature during the fire?"}),"\n",(0,s.jsx)(n.li,{children:"What was the average CO level during the fire?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To get the dataset, run the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax\nmkdir build\ncd build\nmake\n./bin/make_kitchen_fire\n"})}),"\n",(0,s.jsx)(n.p,{children:'The dataset will be stored in "kitchen_fire.bin". It is not human-readable. The\ndataset contains atmospheric readings for every minute of the 24-hour day. There\nare 1,440 minutes in a day. Each reading contains two entries: (Temperature,\nCarbon Monoxide). They are represented as follows:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"struct SensorEntry {\n  float temp_;\n  float co_;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"To run the sample solution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./bin/analyze_kitchen_fire\n"})}),"\n",(0,s.jsx)(n.p,{children:"Expected output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Start of fire: 621\nEnd of fire: 650\nAverage temperature: 102.5\nAverage CO: 280\n"})}),"\n",(0,s.jsx)(n.p,{children:"Your Objectives:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a file called my_analyze_kitchen_fire.cc in the ",(0,s.jsx)(n.code,{children:"${GRC_TUTORIAL}/cpp/04-cpp-basic-syntax"})," directory"]}),"\n",(0,s.jsx)(n.li,{children:"Edit the CMakeLists.txt in that directory to compile your code. Feel free to look at how the other sources in that directory were compiled."}),"\n",(0,s.jsx)(n.li,{children:'How do you read "kitchen_fire.bin" and interpret its contents?'}),"\n",(0,s.jsx)(n.li,{children:"How do you analyze its contents to determine the start, end, and average\nvalues for the fire?"}),"\n",(0,s.jsx)(n.li,{children:"You should create separate functions for determining the start, end, and average values for the fire."}),"\n",(0,s.jsx)(n.li,{children:"Compare your solution to the sample solution."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"What this exercise covers:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Basic data types (integers, floats, struct, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Conditional statements + loops"}),"\n",(0,s.jsx)(n.li,{children:"How to read a file"}),"\n",(0,s.jsx)(n.li,{children:"Functions + references"}),"\n",(0,s.jsx)(n.li,{children:"How to edit a CMake to compile your code"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);