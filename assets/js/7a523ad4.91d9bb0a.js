"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[25326],{50003:e=>{e.exports=JSON.parse('{"abstract":"Persistent memory allocation is a fundamental building block for developing high-performance and in-\\nmemory applications. Existing persistent memory allocators suffer from many performance issues. First, they\\nmay introduce repeated cache line flushes and small random accesses in persistent memory for their poor\\nheap metadata management. Second, they use static slab segregation resulting in a dramatic increase in mem-\\nory consumption when allocation request size is changed. Third, they are not aware of NUMA effect, leading\\nto remote persistent memory accesses in memory allocation and deallocation processes. In this article, we\\ndesign a novel allocator, named PMAlloc, to solve the above issues simultaneously. (1) PMAlloc eliminates\\ncache line reflushes by mapping contiguous data blocks in slabs to interleaved metadata entries stored in dif-\\nferent cache lines. (2) It writes small metadata units to a persistent bookkeeping log in a sequential pattern to\\nremove random heap metadata accesses in persistent memory. (3) Instead of using static slab segregation, it\\nsupports slab morphing, which allows slabs to be transformed between size classes to significantly improve\\nslab usage. (4) It uses a local-first allocation policy to avoid allocating remote memory blocks. And it sup-\\nports a two-phase deallocation mechanism including recording and synchronization to minimize the number\\nof remote memory access in the deallocation. PMAlloc is complementary to the existing consistency models.\\nResults on six benchmarks demonstrate that PMAlloc improves the performance of state-of-the-art persistent\\nmemory allocators by up to 6.4\xd7 and 57\xd7 for small and large allocations, respectively. PMAlloc with NUMA\\noptimizations brings a 2.9\xd7 speedup in multi-socket evaluation and is up to 36\xd7 faster than other persistent\\nmemory allocators. Using PMAlloc reduces memory usage by up to 57.8%. Besides, we integrate PMAlloc in\\na persistent FPTree. Compared to the state-of-the-art allocators, PMAlloc improves the performance of this\\napplication by up to 3.1x.","authors":["Z. Dang","S. He","X. Zhang","P. Hong","Z. Li","X. Chen","H. Song","X.-H. Sun","G. Chen"],"date":"September, 2024","doi":"10.1145/3643886","links":{"bibtex":"http://cs.iit.edu/~scs/assets/files/dang2024pmalloc.bib","citation":"http://cs.iit.edu/~scs/assets/files/dang2024pmalloc.txt","pdf":"http://cs.iit.edu/~scs/assets/files/dang2024pmalloc.pdf"},"month":9,"slug":"dang-2024-pmalloc-afaa","tags":["Persistent Memory","Memory Management"],"title":"PMAlloc: A Holistic Approach to Improving Persistent Memory Allocation","type":"Journal","venue":"ACM Transactions on Computer Systems (TOCS\'24)","year":2024}')}}]);